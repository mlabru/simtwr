#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------------------------
# pSiPAR
# Copyright (c) 2008, Milton Abrunhosa
# -----------------------------------------------------------------------------------------------
# Package..: pSiPAR
# Classe...: netManager
#
# Descrição: DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
# Detalhes de Alteração
# -----------------------------------------------------------------------------------------------
# mlabru   2009/fev/12  version started
# -----------------------------------------------------------------------------------------------
# Detalhes de Versão
# -----------------------------------------------------------------------------------------------
# start    2009/fev/12  version started
# 1.0-0.1  2009/fev/12  DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#

# -----------------------------------------------------------------------------------------------
# includes
# -----------------------------------------------------------------------------------------------
#

# Python library
# ------------------------------------------------------------------------------------------------
import socket
import struct
import sys
import threading
import time

# log4Py (logger)
# ------------------------------------------------------------------------------------------------
import logging

# pSiPAR / model
# ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.glbData as glbData

# pSiPAR / view
# ------------------------------------------------------------------------------------------------
import view.dialog.Tk.dlgWaiting as dlgWaiting

# -----------------------------------------------------------------------------------------------
# variáveis globais
# -----------------------------------------------------------------------------------------------
#

# logging level
# ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

# -----------------------------------------------------------------------------------------------
# netManager::netManager
# -----------------------------------------------------------------------------------------------
# DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#
class netManager ( threading.Thread ):

    # -------------------------------------------------------------------------------------------
    # netManager::__init__
    # -------------------------------------------------------------------------------------------
    # initializes the display
    # -------------------------------------------------------------------------------------------
    # @param  f_iCanal - canal de comunicação
    # @param  f_bCnfg  - config flag
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def __init__ ( self, f_iCanal = 1, f_bCnfg = False ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netManager::__init__"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #l_log.info ( "Canal: " + str ( f_iCanal ))

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert (( f_iCanal > 0 ) and ( f_iCanal < 251 ))

        # ---------------------------------------------------------------------------------------
        # inicializa a super class
        #
        threading.Thread.__init__ ( self )

        # ---------------------------------------------------------------------------------------
        # monta o endereço de configuração
        #
        self._szCnfg = "%s.%s" % ( glbDefs.xNET_Cnfg, str ( f_iCanal ))
        #assert ( self._szCnfg )
        #l_log.info ( u"endereço de configuração: " + self._szCnfg )

        # ---------------------------------------------------------------------------------------
        # monta o endereço de dados
        #
        self._szData = "%s.%s" % ( glbDefs.xNET_Data, str ( f_iCanal ))
        #assert ( self._szData )
        #l_log.info ( u"endereço de dados: " + self._szData )

        # ---------------------------------------------------------------------------------------
        # configura a porta
        #
        self._iPort = int ( glbDefs.xNET_Port )
        #l_log.info ( "porta: " + str ( self._iPort ))

        # ---------------------------------------------------------------------------------------
        # keep things running
        #
        self._bCnfg = f_bCnfg
        #l_log.info ( "listener de conf/data: " + str ( self._bCnfg ))

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # ===========================================================================================
    # acesso a área de dados do objeto
    # ===========================================================================================

# -----------------------------------------------------------------------------------------------
# netListener::netListener
# -----------------------------------------------------------------------------------------------
# DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#
class netListener ( netManager ):

    # -------------------------------------------------------------------------------------------
    # netListener::__init__
    # -------------------------------------------------------------------------------------------
    # initializes the display
    # -------------------------------------------------------------------------------------------
    # @param  f_iCanal - canal de comunicação
    # @param  f_bCnfg  - config flag
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def __init__ ( self, f_iCanal = 1, f_bCnfg = False ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netListener::__init__"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert (( f_iCanal > 0 ) and ( f_iCanal < 251 ))

        # ---------------------------------------------------------------------------------------
        # inicializa a super class
        #
        netManager.__init__ ( self, f_iCanal )

        # ---------------------------------------------------------------------------------------
        # cria o socket de recebimento
        #
        self._fdRecv = socket.socket ( socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP )
        #assert ( self._fdRecv )

        self._fdRecv.setsockopt ( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )

        # ---------------------------------------------------------------------------------------
        # bind udp port
        #
        self._fdRecv.bind (( '', self._iPort ))

        # ---------------------------------------------------------------------------------------
        # endereço de configuração
        #
        self._bCnfg = f_bCnfg

        # ---------------------------------------------------------------------------------------
        # listener de configuração ?
        #
        if ( f_bCnfg ):

            # -----------------------------------------------------------------------------------
            # endereço de configuração
            #
            l_szINet = self._szCnfg

        # ---------------------------------------------------------------------------------------
        # senão, listener de dados
        #
        else:

            # -----------------------------------------------------------------------------------
            # endereço de dados
            #
            l_szINet = self._szData

        # ---------------------------------------------------------------------------------------
        # set mcast group
        #
        l_mreq = struct.pack ( '4sl', socket.inet_aton ( l_szINet ), socket.INADDR_ANY )
        #assert ( l_mreq )

        self._fdRecv.setsockopt ( socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, l_mreq )

        # ---------------------------------------------------------------------------------------
        # inicia a lista de dados
        #
        self._lstData = []

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # netManager::getExe
    # -------------------------------------------------------------------------------------------
    # recebe os dados do exercício
    # -------------------------------------------------------------------------------------------
    # @param  nenhum
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def getExe ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netManager::getExe"

        # lista de dados recebidos
        # ----------------------------------------------------------------------------------------
        l_lst = None


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica condições de execução
        #
        #assert ( self._fdRecv )

        # ---------------------------------------------------------------------------------------
        # cria e exibe a janela de aviso
        #
        l_dlg = dlgWaiting.dlgWaiting ( u"Aguardando a configuração..." )
        #assert ( l_dlg )

        # ---------------------------------------------------------------------------------------
        # application loop
        #
        while ( True ):

            # -----------------------------------------------------------------------------------
            # aguarda receber uma mensagem (de até 256 bytes)
            #
            l_data, l_addr = self._fdRecv.recvfrom ( 256 )
            #l_log.info ( "Msg (%s) recebida de (%s): " % ( l_data, l_addr ))

            # -----------------------------------------------------------------------------------
            #
            l_lstData = l_data.split ( glbDefs.xMSG_Sep )
            #l_log.info ( "Msg (%s) em partes (%s): " % ( l_data, str ( l_lstData )))

            # -----------------------------------------------------------------------------------
            # versão da mensagem não reconhecida ?
            #
            if ( glbDefs.xMSG_Vrs != int ( l_lstData [ 0 ] )):

                # -------------------------------------------------------------------------------
                # próxima mensagem
                #
                continue

            # -----------------------------------------------------------------------------------
            # mensagem de identificação de exercício ?
            #
            elif ( glbDefs.xMSG_Exe == int ( l_lstData [ 1 ] )):

                #l_log.info ( "Exe: (%s)" % str ( l_lstData [ 2: ] ))

                # -------------------------------------------------------------------------------
                #
                l_lst = l_lstData [ 2: ]

                break

            # -----------------------------------------------------------------------------------
            # mensagem de lista de dados de exercício ?
            #
            elif ( glbDefs.xMSG_Exe_Dat == int ( l_lstData [ 1 ] )):

                #l_log.info ( "Exe: (%s)" % str ( l_lstData [ 2: ] ))

                # -------------------------------------------------------------------------------
                #
                l_lst = l_lstData [ 2: ]

                break

        # ---------------------------------------------------------------------------------------
        # apaga a janela de aviso
        #
        l_dlg.closePanel ()

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

        # ---------------------------------------------------------------------------------------
        #
        return ( l_lst )

    # -------------------------------------------------------------------------------------------
    # netManager::run
    # -------------------------------------------------------------------------------------------
    # drive application
    # -------------------------------------------------------------------------------------------
    # @param  nenhum
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def run ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netManager::run"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica condições de execução
        #
        #assert ( self._fdRecv )

        # ---------------------------------------------------------------------------------------
        # enquanto não inicia...
        #
        while ( not glbData.g_bKeepRun ):

            # -----------------------------------------------------------------------------------
            # aguarda 1 seg
            #
            time.sleep ( 1 )

        # ---------------------------------------------------------------------------------------
        # application loop
        #
        while ( glbData.g_bKeepRun ):

            # -----------------------------------------------------------------------------------
            # aguarda receber uma mensagem (de ate 256 bytes)
            #
            l_data, l_addr = self._fdRecv.recvfrom ( 256 )
            #l_log.info ( "Msg (%s) recebida de (%s): " % ( l_data, l_addr ))

            # -----------------------------------------------------------------------------------
            # divide a mensagem em seus componentes
            #
            l_lstData = l_data.split ( glbDefs.xMSG_Sep )
            #l_log.info ( "Msg (%s) em partes (%s): " % ( l_data, str ( l_lstData )))

            # -----------------------------------------------------------------------------------
            # versão da mensagem não reconhecida ?
            #
            if ( glbDefs.xMSG_Vrs != int ( l_lstData [ 0 ] )):

                # -------------------------------------------------------------------------------
                # proxima mensagem
                #
                continue

            # -----------------------------------------------------------------------------------
            # mensagem de aceleração de execução ?
            #
            if ( glbDefs.xMSG_Acc == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de toogle circuit ?
            #
            elif ( glbDefs.xMSG_Ckt == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de toogle call sign ?
            #
            elif ( glbDefs.xMSG_CSg == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de dados ?
            #
            elif ( glbDefs.xMSG_Dat == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de exercicio ?
            #
            elif ( glbDefs.xMSG_Exe == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de explosão ?
            #
            elif ( glbDefs.xMSG_Exp == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de fim de execução ?
            #
            elif ( glbDefs.xMSG_Fim == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de congelamento ?
            #
            elif ( glbDefs.xMSG_Frz == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de eliminação de aeronave ?
            #
            elif ( glbDefs.xMSG_Kll == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de toogle range mark ?
            #
            elif ( glbDefs.xMSG_RMk == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de hora ?
            #
            elif ( glbDefs.xMSG_Tim == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de descongelamento ?
            #
            elif ( glbDefs.xMSG_Ufz == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # mensagem de toogle wind rose ?
            #
            elif ( glbDefs.xMSG_WRs == int ( l_lstData [ 1 ] )):

                # -------------------------------------------------------------------------------
                # coloca a mensagem na queue
                #
                self._lstData.append ( l_lstData [ 1: ] )

            # -----------------------------------------------------------------------------------
            # senão, mensagem não reconhecida
            #
            else:

                # -------------------------------------------------------------------------------
                #
                #l_log.info ( "Unknow: (%s)" % str ( l_lstData [ 2: ] ))

                # -------------------------------------------------------------------------------
                # proxima mensagem
                #
                continue

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # ===========================================================================================
    # acesso a area de dados do objeto
    # ===========================================================================================

    # -------------------------------------------------------------------------------------------
    # netListener::getData
    # -------------------------------------------------------------------------------------------
    # drive application
    # -------------------------------------------------------------------------------------------
    # @param  nenhum
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def getData ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netListener::getData"

        # return list
        # ----------------------------------------------------------------------------------------
        l_lstData = []


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # fila tem dados ?
        #
        if ( self._lstData ):

            # -----------------------------------------------------------------------------------
            # obtem o primeiro item da fila
            #
            l_lstData = self._lstData.pop ( 0 )
            #l_log.info ( "l_lstData: " + str ( l_lstData ))

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

        # ---------------------------------------------------------------------------------------
        #
        return ( l_lstData )

# -----------------------------------------------------------------------------------------------
# netSender::netSender
# -----------------------------------------------------------------------------------------------
# DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#
class netSender ( netManager ):

    # -------------------------------------------------------------------------------------------
    # netSender::__init__
    # -------------------------------------------------------------------------------------------
    # initializes the display
    # -------------------------------------------------------------------------------------------
    # @param  f_iCanal - canal de comunicação
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def __init__ ( self, f_iCanal = 1 ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netSender::__init__"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert (( f_iCanal > 0 ) and ( f_iCanal < 251 ))

        # ---------------------------------------------------------------------------------------
        # inicializa a super class
        #
        netManager.__init__ ( self, f_iCanal )

        # ---------------------------------------------------------------------------------------
        # cria o socket de envio
        #
        self._fdSend = socket.socket ( socket.AF_INET, socket.SOCK_DGRAM )
        #assert ( self._fdSend )

        self._fdSend.setsockopt ( socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 2 )
        
        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # netSender::sendCnfg
    # -------------------------------------------------------------------------------------------
    # drive application
    # -------------------------------------------------------------------------------------------
    # @param  l_szMsg - DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def sendCnfg ( self, l_szMsg ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netSender::sendCnfg"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica condições de execução
        #
        #assert ( self._fdSend )

        # ---------------------------------------------------------------------------------------
        # envia a mensagem
        #
        self._fdSend.sendto ( l_szMsg, ( self._szCnfg, self._iPort ))
        #l_log.info ( u"Configuração (%s) enviada para (%s:%d): " % ( l_szMsg, self._szCnfg, self._iPort ))

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # netSender::sendData
    # -------------------------------------------------------------------------------------------
    # drive application
    # -------------------------------------------------------------------------------------------
    # @param  l_szMsg - DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def sendData ( self, l_szMsg ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "netSender::sendData"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica condições de execução
        #
        #assert ( self._fdSend )

        # ---------------------------------------------------------------------------------------
        # envia a mensagem
        #
        self._fdSend.sendto ( l_szMsg, ( self._szData, self._iPort ))
        #l_log.info ( "Dados (%s) enviados para (%s:%d): " % ( l_szMsg, self._szData, self._iPort ))

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # ===========================================================================================
    # acesso a area de dados do objeto
    # ===========================================================================================

# -----------------------------------------------------------------------------------------------
#
logger = logging.getLogger ( "netManager" )

# -----------------------------------------------------------------------------------------------
#
logger.setLevel ( w_logLvl )

# -----------------------------------------------------------------------------------------------
# this is the bootstrap process
#
if ( "__main__" == __name__ ):

    # -------------------------------------------------------------------------------------------
    # m.poirot logger
    #
    logging.basicConfig ()
                
    # -------------------------------------------------------------------------------------------
    #
    l_nm = netManager ()
    #assert ( l_nm )
                            
# ----------------------------------------------------------------------------------------------- *#
