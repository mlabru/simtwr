#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------------------------
# pSiPAR
# Copyright (c) 2008, Milton Abrunhosa
# -----------------------------------------------------------------------------------------------
# Package..: pSiPAR
# Classe...: simTime
#
# Descrição: _
# -----------------------------------------------------------------------------------------------
# Detalhes de Alteração
# -----------------------------------------------------------------------------------------------
# mlabru   2008/jun/20  version started
# -----------------------------------------------------------------------------------------------
# Detalhes de Versão
# -----------------------------------------------------------------------------------------------
# start    2008/jun/20  version started
# 1.0-0.1  2008/jun/20  DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#

# -----------------------------------------------------------------------------------------------
# includes
# -----------------------------------------------------------------------------------------------
#

# -----------------------------------------------------------------------------------------------
# procedures externas
# -----------------------------------------------------------------------------------------------
#

# Python library
# ------------------------------------------------------------------------------------------------
import sys
import threading
import time

if ( '__main__' == __name__ ):

    sys.path.insert ( 0, "." )

# log4Py (logger)
# ------------------------------------------------------------------------------------------------
import logging

# pSiPAR / model
# ------------------------------------------------------------------------------------------------
import model.glbData as glbData
import model.glbDefs as glbDefs

# -----------------------------------------------------------------------------------------------
# variáveis globais
# -----------------------------------------------------------------------------------------------
#

# logging level
# ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

# -----------------------------------------------------------------------------------------------
# simTime::simTime
# -----------------------------------------------------------------------------------------------
# DOCUMENT ME!
# -----------------------------------------------------------------------------------------------
#
class simTime ( threading.Thread ):

    # -------------------------------------------------------------------------------------------
    # simTime::__init__
    # -------------------------------------------------------------------------------------------
    # obtem a hora do relogio do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def __init__ ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::__init__"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # inicializa a super class
        #
        threading.Thread.__init__ ( self )

        # ---------------------------------------------------------------------------------------
        # flag congela
        #
        self._bCongela = False

        # ---------------------------------------------------------------------------------------
        # tempo anterior de execução
        #
        #X#self._ulTpoAnt = 0

        # ---------------------------------------------------------------------------------------
        # tempo atual de execução
        #
        #X#self._ulTpoAtu = 0

        # ---------------------------------------------------------------------------------------
        # hora zero da simulação
        #
        self._fZeroSim = 0.0

        # ---------------------------------------------------------------------------------------
        # preenche a hora zero do sistema (seg)
        #
        self._fZeroSys = time.time ()
        #l_log.info ( "self._fZeroSys: [%.3f]" % self._fZeroSys )

        # ---------------------------------------------------------------------------------------
        # hora atual do exercício
        #
        self._btHA = 0
        self._btMA = 0
        self._btSA = 0

        # ---------------------------------------------------------------------------------------
        # hora atual do exercício
        #
        self._szHora = "%02d:%02d:%02d" % ( self._btHA, self._btMA, self._btSA )
        #l_log.info ( "Hora atual: [%s]" % self._szHora )

        # ---------------------------------------------------------------------------------------
        # hora atual do exercício
        #
        self._fHoraAtu = 0

        # ---------------------------------------------------------------------------------------
        # tempo de congelamento do exercício
        #
        self._fHoraFrz = 0

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::ajustaHora
    # -------------------------------------------------------------------------------------------
    # permite iniciar a hora do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def ajustaHora ( self, f_Hora ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::ajustaHora"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert ( f_Hora )

        # ---------------------------------------------------------------------------------------
        # preenche a hora zero da simulação (seg)
        #
        self._fZeroSim = f_Hora
        #l_log.info ( "self._fZeroSim: [%.3f]" % self._fZeroSim )

        # ---------------------------------------------------------------------------------------
        # preenche a hora zero do sistema (seg)
        #
        self._fZeroSys = time.time ()
        #l_log.info ( "self._fZeroSys: [%.3f]" % self._fZeroSys )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::cbkCongela
    # -------------------------------------------------------------------------------------------
    # permite iniciar a hora do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def cbkCongela ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::cbkCongela"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # flag congela
        #
        self.setCongela ( True )

        # ---------------------------------------------------------------------------------------
        # obtem a hora do sistema (seg)
        #
        self._fHoraFrz = time.time ()
        #l_log.info ( "self._fHoraFrz: [%.3f]" % self._fHoraFrz )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::cbkDescongela
    # -------------------------------------------------------------------------------------------
    # permite iniciar a hora do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def cbkDescongela ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::cbkDescongela"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # obtem a hora do sistema (seg)
        #
        l_fHoraNow = time.time ()
        #l_log.info ( "l_fHoraNow: [%.3f]" % l_fHoraNow )

        # ---------------------------------------------------------------------------------------
        # calcula quanto tempo ficou congelado
        #
        l_fHoraDif = l_fHoraNow - self._fHoraFrz
        #l_log.info ( "l_fHoraDif: [%.3f]" % l_fHoraDif )

        # ---------------------------------------------------------------------------------------
        # incrementa ao tempo zero do sistema (seg)
        #
        self._fZeroSys += l_fHoraDif
        #l_log.info ( "self._fZeroSys: [%.3f]" % self._fZeroSys )

        # ---------------------------------------------------------------------------------------
        # flag congela
        #
        self.setCongela ( False )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::getHoraFormat
    # -------------------------------------------------------------------------------------------
    # exibe o relogio da simulação
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def getHoraFormat ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::getHoraFormat"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # obtem a hora atual do exercício
        #
        l_btH, l_btM, l_btS, l_btMs = self.obtemHora ()

        # ---------------------------------------------------------------------------------------
        # checa se mudou algo
        #
        if (( l_btH != self._btHA ) or ( l_btM != self._btMA ) or ( l_btS != self._btSA )):

            # -----------------------------------------------------------------------------------
            # monta a string com a hora atual
            #
            self._szHora = "%02d:%02d:%02d" % ( l_btH, l_btM, l_btS )
            #assert ( self._szHora )

            # -----------------------------------------------------------------------------------
            # salva os valores atuais
            #
            self._btHA = l_btH
            self._btMA = l_btM
            self._btSA = l_btS

        #l_log.info ( "Hora atual: [%s]" % self._szHora )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

        # ---------------------------------------------------------------------------------------
        # retorna a hora da simulação formatada
        #
        return ( self._szHora )

    # -------------------------------------------------------------------------------------------
    # simTime::obtemHora
    # -------------------------------------------------------------------------------------------
    # obtem a hora do relogio do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def obtemHora ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::obtemHora"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # obtem a hora da simulação
        #
        l_fHoraNow = self.obtemHoraSim ()

        # ---------------------------------------------------------------------------------------
        # calcula os centésimos de segundo
        #
        l_btSeg = l_fHoraNow
        l_btMsg = int ( l_fHoraNow )

        # ---------------------------------------------------------------------------------------
        # calcula os segundos
        #
        l_btMin = l_btSeg / 60.
        l_btSeg = int ( l_btSeg % 60. )

        # ---------------------------------------------------------------------------------------
        # calcula os minutos e as horas
        #
        l_btHor = int ( l_btMin / 60. )
        l_btMin = int ( l_btMin % 60. )

        #l_log.info ( "l_fHora: [%d:%d:%d.%03d]" % ( l_btHor, l_btMin, l_btSeg, l_btMsg ))

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

        # ---------------------------------------------------------------------------------------
        #
        return ( l_btHor, l_btMin, l_btSeg, l_btMsg )

    # -------------------------------------------------------------------------------------------
    # simTime::obtemHoraSim
    # -------------------------------------------------------------------------------------------
    # obtem a hora do relogio do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def obtemHoraSim ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::obtemHoraSim"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # hora descongelada ?
        #
        if ( not self._bCongela ):

            # ---------------------------------------------------------------------------------------
            # obtem a hora do sistema (seg)
            #
            self._fHoraAtu = time.time ()
            #l_log.info ( "self._fHoraAtu: [%.3f]" % self._fHoraAtu )

        # ---------------------------------------------------------------------------------------
        # calcula a diferença com a hora zero
        #
        l_fHoraDif = self._fHoraAtu - self._fZeroSys
        #l_log.info ( "l_fHoraDif: [%.3f]" % l_fHoraDif )

        # ---------------------------------------------------------------------------------------
        # incrementa a hora zero da simulação
        #
        l_fHoraNow = self._fZeroSim + ( l_fHoraDif * glbDefs.xTIM_Accel )

        #l_log.info ( "self._fZeroSim.....................: [%.3f]" % self._fZeroSim )
        #l_log.info ( "( l_fHoraDif * glbDefs.xTIM_Accel ): [%.3f]" % ( l_fHoraDif * glbDefs.xTIM_Accel ))
        #l_log.info ( "l_fNowSim..........................: [%.3f]" % l_fHoraNow )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

        # ---------------------------------------------------------------------------------------
        #
        return ( l_fHoraNow )

    # -------------------------------------------------------------------------------------------
    # simTime::run
    # -------------------------------------------------------------------------------------------
    # exibe o relogio da simulação
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def run ( self ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::run"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # enquanto não inicia...
        #
        while ( not glbData.g_bKeepRun ):

            # -----------------------------------------------------------------------------------
            # aguarda 1 seg
            #
            time.sleep ( 1 )

        # ---------------------------------------------------------------------------------------
        # loop de exibição do relógio
        #
        while ( glbData.g_bKeepRun ):

            # -----------------------------------------------------------------------------------
            # exibe a hora na tela
            #
            #X#showHora ()

            # -----------------------------------------------------------------------------------
            # aguarda 1/2 seg
            #
            time.sleep ( .5 )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::sendHora
    # -------------------------------------------------------------------------------------------
    # descongela as aeronaves
    # -------------------------------------------------------------------------------------------
    # @param  f_ns - DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def sendHora ( self, f_ns ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::sendHora"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert ( f_ns )

        # ---------------------------------------------------------------------------------------
        # envia os dados de configuração
        #
        f_ns.sendCnfg ( str ( glbDefs.xMSG_Vrs ) + glbDefs.xMSG_Sep +
                        str ( glbDefs.xMSG_Tim ) + glbDefs.xMSG_Sep + str ( self.obtemHora ()))
        
        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # -------------------------------------------------------------------------------------------
    # simTime::setaHora
    # -------------------------------------------------------------------------------------------
    # permite iniciar a hora do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def setaHora ( self, f_Hora ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::setaHora"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert ( f_Hora )

        #assert ( 0 <= f_Hora [ 0 ] <= 23 )  # hora
        #assert ( 0 <= f_Hora [ 1 ] <= 59 )  # minutos
        #assert ( 0 <= f_Hora [ 2 ] <= 59 )  # segundos

        # ---------------------------------------------------------------------------------------
        # preenche a hora zero da simulação (seg)
        #
        self._fZeroSim = ((((( f_Hora [ 0 ] * 60 ) + f_Hora [ 1 ] ) * 60 ) + f_Hora [ 2 ] ))
        #l_log.info ( "self._fZeroSim: [%.3f]" % self._fZeroSim )

        # ---------------------------------------------------------------------------------------
        # preenche a hora zero do sistema (seg)
        #
        self._fZeroSys = time.time ()
        #l_log.info ( "self._fZeroSys: [%.3f]" % self._fZeroSys )

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

    # ===========================================================================================
    # acesso a area de dados do objeto
    # ===========================================================================================

    # -------------------------------------------------------------------------------------------
    # simTime::setCongela
    # -------------------------------------------------------------------------------------------
    # permite iniciar a hora do equipamento
    # -------------------------------------------------------------------------------------------
    # @param  DOCUMENT ME!
    #
    # @return nenhum
    # -------------------------------------------------------------------------------------------
    #
    def setCongela ( self, f_bVal ):

        # nome do método (logger)
        # ----------------------------------------------------------------------------------------
        #l_szMetodo = "simTime::setCongela"


        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        # ---------------------------------------------------------------------------------------
        # verifica parâmetros de entrada
        #
        #assert ( type ( True ) == type ( f_bVal ))

        # ---------------------------------------------------------------------------------------
        # flag congela
        #
        self._bCongela = f_bVal

        # ---------------------------------------------------------------------------------------
        # m.poirot logger
        #
        #l_log.debug ( "<< " )

# -----------------------------------------------------------------------------------------------
#
logger = logging.getLogger ( "simTime" )

# -----------------------------------------------------------------------------------------------
#
logger.setLevel ( w_logLvl )

# -----------------------------------------------------------------------------------------------
# this is the bootstrap process
#
if ( '__main__' == __name__ ):

    # -------------------------------------------------------------------------------------------
    # m.poirot logger
    #
    logging.basicConfig ()

    # -------------------------------------------------------------------------------------------
    #
    l_st = simTime ()
    #assert ( l_st )

    # -------------------------------------------------------------------------------------------
    # configura a hora
    #
    l_st.setaHora (( 10, 0, 0 ))

    # -------------------------------------------------------------------------------------------
    #
    ( l_h, l_m, l_s, l_ms ) = l_st.obtemHora ()
    print ( l_h, l_m, l_s, l_ms )

    time.sleep ( 1 )

    print l_st.obtemHoraSim ()
    
    time.sleep ( 1 )

    print l_st.obtemHoraSim ()
    
    time.sleep ( 1 )

    print l_st.obtemHoraSim ()
    
    time.sleep ( 1 )

    print l_st.obtemHoraSim ()
    
    time.sleep ( 1 )

    print l_st.obtemHoraSim ()
    
    # -------------------------------------------------------------------------------------------
    #
    print l_st.getHoraFormat ()


    l_st.cbkCongela ()
    
    time.sleep ( 2 )
    

    l_st.cbkDescongela ()

    # -------------------------------------------------------------------------------------------
    #
    print l_st.getHoraFormat ()

# ----------------------------------------------------------------------------------------------- *#
