#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2010, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: pyACME
#*  Classe...: clsTabelaModel
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2009/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2009/fev/12  version started
#*  1.01-01  2009/set/01  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import bisect

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ PyQt library
#/ ------------------------------------------------------------------------------------------------
from PyQt4 import QtCore

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsTabelaModel::clsTabelaModel
#*  -----------------------------------------------------------------------------------------------
#*  uma tabela mantém um conjunto de itens. Os itens são mantidos ordenados por sua chave, assim se
#*  este campo for alterado os itens devem ser re-ordenados. Por esta razão (e para manter o flag
#*  de alteração), todas as atualizações devem ser feitas através do método updateTabela.
#*  -----------------------------------------------------------------------------------------------
#*/
class clsTabelaModel ( object ):

    #** -------------------------------------------------------------------------------------------
    #*/
    c_xxFILE_VERSION = 101
    c_xxMAGIC_NUMBER = 0x3051E

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the main menu
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  nome do arquivo em disco
        #*/
        self._szFName = QtCore.QString ()

        #** ---------------------------------------------------------------------------------------
        #*  array de itens
        #*/
        self._aItens = []

        #** ---------------------------------------------------------------------------------------
        #*  conjunto de itens por ID
        #*/
        self._setItemFromId = {}

        #** ---------------------------------------------------------------------------------------
        #*  flag dirty
        #*/
        self._bDirty = False
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  pointer para a tabela
        #*/
        self._tabItens = None
        #l_log.info ( "self._tabItens: " + str ( self._tabItens ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::__iter__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __iter__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::__iter__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        for pair in iter ( self._aItens ):

            #** -----------------------------------------------------------------------------------
            #*/
            yield pair [ 1 ]

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::__len__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __len__ ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::__len__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o tamanho do array de itens
        #*/
        return ( len ( self._aItens ))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::add
    #*  -------------------------------------------------------------------------------------------
    #*  adds the given item to the list if it isn't already present.
    #*  returns True if added; otherwise returns False
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oItem - DOCUMENT ME!
    #*  @param  f_szKey - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def add ( self, f_oItem, f_szKey ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::add"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  checa se o item já está na lista...
        #*/
        if ( id ( f_oItem ) in self._setItemFromId ):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  se está, cai fora...
            #*/
            return ( False )

        #** ---------------------------------------------------------------------------------------
        #*  cria uma chave de hash para o item
        #*/
        l_tKey = self.key ( f_szKey )

        #** ---------------------------------------------------------------------------------------
        #*/
        bisect.insort_left ( self._aItens, [ l_tKey, f_oItem ] )

        #l_log.info ( "type of __aItens: " + type ( self._aItens ))
        #l_log.info ( "__aItens........: " + str ( self._aItens ))

        #** ---------------------------------------------------------------------------------------
        #*  salva ponteiro para o item pelo ID
        #*/
        self._setItemFromId [ id ( f_oItem ) ] = f_oItem

        #** ---------------------------------------------------------------------------------------
        #*  seta flag de alteração na tabela
        #*/
        self._bDirty = True
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::itemAtIndex
    #*  -------------------------------------------------------------------------------------------
    #*  returns the index-th aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_iNdx - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def itemAtIndex ( self, f_iNdx ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::itemAtIndex"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._aItens [ f_iNdx ][ 1 ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::itemFromId
    #*  -------------------------------------------------------------------------------------------
    #*  returns the aeronave with the given Python ID
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_ID - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def itemFromId ( self, f_ID ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::itemFromId"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._setItemFromId [ f_ID ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::itemFromKey
    #*  -------------------------------------------------------------------------------------------
    #*  returns the aeronave with the given key
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szKey - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def itemFromKey ( self, f_szKey ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::itemFromKey"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a hash do item
        #*/
        l_Hash = self.key ( f_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  percorre a lista de itens procurando a hash
        #*/
        for l_tKey, l_oAnv in self._aItens:

            #** -----------------------------------------------------------------------------------
            #*  checa se é a hash procurada
            #*/
            if ( l_tKey == l_Hash ):

                #** -------------------------------------------------------------------------------
                #*  m.poirot logger
                #*/
                #l_log.debug ( "<< " )

                #** -------------------------------------------------------------------------------
                #*/
                return ( l_oAnv )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( None )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::clear
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_bClrFName - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def clear ( self, f_bClrFName=True ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::clear"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  limpa o array de itens
        #*/
        self._aItens = []

        #** ---------------------------------------------------------------------------------------
        #*  limpa o conjunto de itens por ID
        #*/
        self._setItemFromId = {}

        #** ---------------------------------------------------------------------------------------
        #*  limpa o filename ?
        #*/
        if ( f_bClrFName ):

            #** -----------------------------------------------------------------------------------
            #*  reseta o filename
            #*/
            self._szFName = QtCore.QString ()

        #** ---------------------------------------------------------------------------------------
        #*  reseta o flag de alterção
        #*/
        self._bDirty = False
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::delete
    #*  -------------------------------------------------------------------------------------------
    #*  deletes the given item from the list.
    #*  returns True; returns False if the item isn't in the list
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oItem - DOCUMENT ME!
    #*  @param  f_szKey - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def delete ( self, f_oItem, f_szKey ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::delete"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se o item não está no array
        #*/
        if ( id ( f_oItem ) not in self._setItemFromId ):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  returns False if the item isn't in the list
            #*/
            return ( False )

        #** ---------------------------------------------------------------------------------------
        #*  monta a key
        #*/
        l_tKey = self.key ( f_szKey )

        #** ---------------------------------------------------------------------------------------
        #*  calcula o ponto de inserção no array (bissetriz esquerda)
        #*/
        l_iI = bisect.bisect_left ( self._aItens, [ l_tKey, f_oItem ] )

        #** ---------------------------------------------------------------------------------------
        #*  remove o item do array
        #*/
        del ( self._aItens [ l_iI ] )

        #** ---------------------------------------------------------------------------------------
        #*  remove o ID do item do array
        #*/
        del ( self._setItemFromId [ id ( f_oItem ) ] )

        #** ---------------------------------------------------------------------------------------
        #*  avisa que houve modificação na tabela
        #*/
        self._bDirty = True
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::exportXML
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_parent - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def exportXML ( self, f_szFName ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::exportXML"

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, "Método abstrato, redefina na classe !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::formats
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    @staticmethod
    def formats ():

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::formats"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( "*.MQB *.DAT" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::key
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szKey - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def key ( self, f_szKey ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::key"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_szText = unicode ( f_szKey ).lower ()

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_szText.startswith ( "a " )):

            #** -----------------------------------------------------------------------------------
            #*/
            l_szText = l_szText [ 2: ]

        #** ---------------------------------------------------------------------------------------
        #*/
        elif ( l_szText.startswith ( "an " )):

            #** -----------------------------------------------------------------------------------
            #*/
            l_szText = l_szText [ 3: ]

        #** ---------------------------------------------------------------------------------------
        #*/
        elif ( l_szText.startswith ( "the " )):

            #** -----------------------------------------------------------------------------------
            #*/
            l_szText = l_szText [ 4: ]

        #** ---------------------------------------------------------------------------------------
        #*/
        parts = l_szText.split ( " ", 1 )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( parts [ 0 ].isdigit ()):

            #** -----------------------------------------------------------------------------------
            #*/
            l_szText = "{0:08d} ".format ( int ( parts [ 0 ] ))

            #** -----------------------------------------------------------------------------------
            #*/
            if ( len ( parts ) > 1 ):

                #** -------------------------------------------------------------------------------
                #*/
                l_szText += parts [ 1 ]

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( "{0}".format ( l_szText.replace ( " ", "" )))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::load
    #*  -------------------------------------------------------------------------------------------
    #*  carrega a tabela selecionada
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szFName - nome da tabela a carregar
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def load ( self, f_szFName=QtCore.QString ()):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::load"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  checa nome do arquivo a carregar...
        #*/
        if ( f_szFName.isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  avisa do erro e cai fora
            #*/
            return ( False, u"Erro na carga: nome do arquivo inválido !" )

        #** ---------------------------------------------------------------------------------------
        #*  se a tabela já existe...
        #*/
        if ( None != self._tabItens ):

            #** -----------------------------------------------------------------------------------
            #*  limpa o conteúdo
            #*/
            self.clear ()

        #** ---------------------------------------------------------------------------------------
        #*  salva o nome do arquivo localmente
        #*/
        self._szFName = f_szFName

        #** ---------------------------------------------------------------------------------------
        #*  checa extensão do arquivo...
        #*/
        if ( self._szFName.endsWith ( ".MQB" )):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( self.loadQDataStream ())

        #** ---------------------------------------------------------------------------------------
        #*/
        elif ( self._szFName.endsWith ( ".DAT" )):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( self.loadTextData ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  avisa do erro e cai fora
        #*/
        return ( False, u"Erro na carga: extensão do arquivo inválida !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::loadQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::loadQDataStream"

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Método abstrato, redefina na classe !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::loadTextData
    #*  -------------------------------------------------------------------------------------------
    #*  initialize airplane class
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadTextData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::loadTextData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condicoes de execução
        #*/
        #assert ( self._szFName )
        #l_log.info ( "Tabela a carregar: " + self._szFName )

        #** ---------------------------------------------------------------------------------------
        #*  abre a tabela
        #*/
        l_fdTab = open ( self._szFName, "r" )
        #assert ( l_fdTab )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de dados
        #*/
        l_data = []

        #** ---------------------------------------------------------------------------------------
        #*  percorre todas as linhas da tabela
        #*/
        for l_line in l_fdTab.readlines ():

            #** -----------------------------------------------------------------------------------
            #*  checa se eh uma linha de comentario ou vazia
            #*/
            if (( not l_line.startswith ( "#" )) and
                ( not l_line.startswith ( "\n" ))):

                #** -------------------------------------------------------------------------------
                #*  checa end-of-line
                #*/
                if ( l_line.endswith ( "\n" ) or l_line.endswith ( "\x1a" )):

                    #** ---------------------------------------------------------------------------
                    #*  aceita o valor sem o end-of-line
                    #*/
                    l_data.extend ( l_line [ :-1 ].split ())

                #** -------------------------------------------------------------------------------
                #*/
                else:

                    #** ---------------------------------------------------------------------------
                    #*  aceita o valor
                    #*/
                    l_data.extend ( l_line.split ())

        #** ---------------------------------------------------------------------------------------
        #*  fecha o arquivo
        #*/
        l_fdTab.close ()

        #** ---------------------------------------------------------------------------------------
        #*  carrega a tabela
        #*/
        self.populateFromData ( l_data )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True, "{0} itens carregados de {1}".format ( len ( self._aItens ),
                                                     QtCore.QFileInfo ( self._szFName ).fileName ()))

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::populateFromData
    #*  -------------------------------------------------------------------------------------------
    #*  carrega os dados do airplane
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_Data - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def populateFromData ( self, f_Data ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::populateFromData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Método abstrato, redefina na classe !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::save
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szFName - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def save ( self, f_szFName=QtCore.QString ()):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::save"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_szFName.isEmpty ()):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( False, u"Erro no salvamento: nome do arquivo inválido !" )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._szFName = f_szFName

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( self._szFName.endsWith ( ".MQB" )):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( self.saveQDataStream ())

        #** ---------------------------------------------------------------------------------------
        #*/
        elif ( self._szFName.endsWith ( ".DAT" )):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*/
            return ( self.saveTextData ())

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Erro no salvamento: extensão do arquivo inválida !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::saveQDataStream
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveQDataStream ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::saveQDataStream"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Método abstrato, redefina na classe !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::saveTextData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def saveTextData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::saveTextData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Método abstrato, redefina na classe !" )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::updateTabela
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_Tab     - DOCUMENT ME!
    #*  @param  f_lstData - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def updateTabela ( self, f_Tab, f_lstData ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::updateTabela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( False, u"Método abstrato, redefina na classe !" )

    #** ===========================================================================================
    #*  rotinas de exportação de entrada da tabela de airplane
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::getFilename
    #*  -------------------------------------------------------------------------------------------
    #*  obtém o nome do arquivo da tabela em uso
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFilename ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::getFilename"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o nome do arquivo da tabela em uso
        #*/
        return ( self._szFName )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::getTabela
    #*  -------------------------------------------------------------------------------------------
    #*  obtém a tabela em uso
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTabela ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::getTabela"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a tabela em uso
        #*/
        return ( self._tabItens )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::isDirty
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def isDirty ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::isDirty"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bDirty )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::setDirty
    #*  -------------------------------------------------------------------------------------------
    #*  seta o flag de alteração
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_bDirty - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setDirty ( self, f_bDirty=True ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::setDirty"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  seta o flag de alteração
        #*/
        self._bDirty = f_bDirty
        #l_log.info ( "self._bDirty: " + str ( self._bDirty ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsTabelaModel::setFilename
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szFName - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setFilename ( self, f_szFName ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsTabelaModel::setFilename"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._szFName = f_szFName

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsTabelaModel" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
