#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: clsExe
#*
#*  Descrição: this file is the clsExe class of the SiCAD.
#*             The clsExe class holds information about a exercício
#*             and holds the commands the exercício has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/jun/20  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import os

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.clsAnv as clsAnv

import model.glbDefs as glbDefs
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level   
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsExe::clsExe
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a clsExe
#*  -----------------------------------------------------------------------------------------------
#*/
class clsExe:

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  setting the variables pertaining to scope and view
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_szExe ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_szExe )
        #l_log.info ( u"Exercício a carregar: " + f_szExe )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltEscala = None
        self._bFimExercicio = None
        self._bMudarEscala = None
        self._btAcidente = None
        self._btAleatorio = None
        self._btPaneDecolagem = None
        self._btPanePouso = None
        self._btPaneTaxi = None
        self._btQtdeAeronaves = None
        self._btQtdeAnvPeelOff = None
        self._iEscala = None
        self._cStatus = None
        self._lstAnvs = None
        self._lTime = None
        self._oHora = None
        self._oVento = None
        self._szIndicativo = None
        self._uiPressao = None
        self._uiTemperatura = None
        self._uiTeto = None
        self._uiVisibilidade = None

        #** ---------------------------------------------------------------------------------------
        #*  obtem o nome do arquivo de exercício
        #*/
        ( l_szPath, self._szExeName ) = os.path.split ( f_szExe )

        #** ---------------------------------------------------------------------------------------
        #*  abre o arquivo de exercício
        #*/
        l_fdExe = open ( f_szExe, "r" )
        assert ( l_fdExe )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de dados
        #*/
        l_data = []

        #** ---------------------------------------------------------------------------------------
        #*  percorre todas as linhas do arquivo de exercício
        #*/
        for l_line in l_fdExe.readlines ():

            #** -----------------------------------------------------------------------------------
            #*  checa se é uma linha de comentario ou vazia
            #*/
            if (( not l_line.startswith ( "#" )) and
                ( not l_line.startswith ( "\n" ))):

                #** -------------------------------------------------------------------------------
                #*  checa end-of-line
                #*/
                if ( l_line.endswith ( "\n" ) or l_line.endswith ( "\x1a" )):

                    #** ---------------------------------------------------------------------------
                    #*  aceita o valor sem o end-of-line
                    #*/
                    l_data.extend ( l_line [ :-1 ].split ())

                else:

                    #** ---------------------------------------------------------------------------
                    #*  aceita o valor
                    #*/
                    l_data.extend ( l_line.split ())

        #** ---------------------------------------------------------------------------------------
        #*  fecha o arquivo
        #*/
        l_fdExe.close ()

        #** ---------------------------------------------------------------------------------------
        #*  carrega o exercício
        #*/
        self.loadExercicio ( l_data )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::loadExercicio
    #*  -------------------------------------------------------------------------------------------
    #*  carrega os dados do exercício
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_data - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadExercicio ( self, f_data ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::loadExercicio"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le o indicativo do aeródromo
        #*/
        self._szIndicativo = str ( f_data [ 0 ] ).upper ()
        #l_log.info ( "_szIndicativo: " + str ( self._szIndicativo ))

        #** ---------------------------------------------------------------------------------------
        #*  escala atual
        #*/
        self._iEscala = 1

        #** ---------------------------------------------------------------------------------------
        #*  status atual
        #*/
        self._cStatus = 'G'

        #** ---------------------------------------------------------------------------------------
        #*  flags
        #*/
        self._bFimExercicio = False
        self._bAltEscala = False
        self._bMudarEscala = False

        #** ---------------------------------------------------------------------------------------
        #*  carrega os dados locais do arquivo de exercício
        #*/
        self.loadDadosLocais ( f_data )

        #** ---------------------------------------------------------------------------------------
        #*  carrega o flag aleatorio
        #*/
        self._btAleatorio = int ( f_data [ 10 ] )
        #l_log.info ( "_btAleatorio: " + str ( self._btAleatorio ))

        #** ---------------------------------------------------------------------------------------
        #*  set outros flags
        #*/
        self._btAcidente      = self._btAleatorio
        self._btPanePouso     = self._btAleatorio
        self._btPaneDecolagem = self._btAleatorio
        self._btPaneTaxi      = self._btAleatorio

        #** ---------------------------------------------------------------------------------------
        #*  lista de aeronaves do exercício
        #*/
        self._lstAnvs = []

        #** ---------------------------------------------------------------------------------------
        #*  carrega as aeronaves do exercício
        #*/
        self.copiaAeronavesDoExercicio ( f_data )

        #** ---------------------------------------------------------------------------------------
        #*  quantidade de aeronaves no peel-off
        #*/
        self._btQtdeAnvPeelOff = 0

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::loadDadosLocais
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_data - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadDadosLocais ( self, f_data ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::loadDadosLocais"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  vento
        #*/
        l_uiDir = int ( f_data [ 1 ] )
        #l_log.info ( "_uiVentoDir: " + str ( l_uiDir ))

        l_uiVel = int ( f_data [ 2 ] )
        #l_log.info ( "_uiVentoVel: " + str ( l_uiVel ))

        self._oVento = ( l_uiDir, l_uiVel )

        #** ---------------------------------------------------------------------------------------
        #*  dados gerais
        #*/
        self._uiVisibilidade = int ( f_data [ 3 ] )
        #l_log.info ( "_uiVisibilidade: " + str ( self._uiVisibilidade ))

        self._uiTeto = int ( f_data [ 4 ] )
        #l_log.info ( "_uiTeto: " + str ( self._uiTeto ))

        self._uiTemperatura = int ( f_data [ 5 ] )
        #l_log.info ( "_uiTemperatura: " + str ( self._uiTemperatura ))

        self._uiPressao = int ( f_data [ 6 ] )
        #l_log.info ( "_uiPressão: " + str ( self._uiPressao ))

        #** ---------------------------------------------------------------------------------------
        #*  hora do exercício
        #*/
        l_iHor = int ( f_data [ 7 ] )
        #l_log.info ( "_iHor: " + str ( l_iHor ))

        l_iMin = int ( f_data [ 8 ] )
        #l_log.info ( "_iMin: " + str ( l_iMin ))

        l_iSeg = int ( f_data [ 9 ] )
        #l_log.info ( "_iSeg: " + str ( l_iSeg ))

        self._oHora = ( l_iHor, l_iMin, l_iSeg )

        #** ---------------------------------------------------------------------------------------
        #*  converte a hora em tempo
        #*/
        self._lTime = ((( l_iHor * 60 ) + l_iMin ) * 60 ) + l_iSeg

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::copiaAeronavesDoExercicio
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def copiaAeronavesDoExercicio ( self, f_data ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::copiaAeronavesDoExercicio"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  quantidade de aeronaves no exercício
        #*/
        self._btQtdeAeronaves = int ( f_data [ 11 ] )
        #l_log.info ( "_btQtdeAeronaves: " + str ( self._btQtdeAeronaves ))

        #** ---------------------------------------------------------------------------------------
        #*/
        l_iD = 12

        #** ---------------------------------------------------------------------------------------
        #*  percorre as aeronaves do exercício
        #*/
        for l_iAnv in xrange ( self._btQtdeAeronaves ):

            #** -----------------------------------------------------------------------------------
            #*/
            #l_log.info ( "===========[ Aeronave ]===========" )
            #l_log.info ( "Aeronave: " + str ( l_iAnv ))

            #** -----------------------------------------------------------------------------------
            #*  status
            #*/
            l_stat = str ( f_data [ l_iD ] ).upper ()
            l_iD += 1

            #l_log.info ( "l_stat: " + str ( l_stat ))

            #** -----------------------------------------------------------------------------------
            #*  numero
            #*/
            l_num = int ( f_data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "l_num: " + str ( l_num ))

            #** -----------------------------------------------------------------------------------
            #*  posição X
            #*/
            l_x = float ( f_data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "l_x: " + str ( l_x ))

            #** -----------------------------------------------------------------------------------
            #*  posição Y
            #*/
            l_y = float ( f_data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "l_y: " + str ( l_y ))

            #** -----------------------------------------------------------------------------------
            #*  família
            #*/
            l_fam = int ( f_data [ l_iD ] )
            l_iD += 1

            assert (( l_fam > 0 ) and ( l_fam <= locDefs.xMAX_Familias ))

            #l_fam -= 1
            #l_log.info ( "l_fam: " + str ( l_fam ))

            #** -----------------------------------------------------------------------------------
            #*  identidade
            #*/
            l_id = str ( f_data [ l_iD ] ).upper ()
            l_iD += 1

            #l_log.info ( "l_id: " + str ( l_id ))

            #** -----------------------------------------------------------------------------------
            #*  tipo
            #*/
            l_tipo = str ( f_data [ l_iD ] ).upper ()
            l_iD += 1

            #l_log.info ( "l_tipo: " + str ( l_tipo ))

            #** -----------------------------------------------------------------------------------
            #*  desenho
            #*/
            l_des = int ( f_data [ l_iD ] )
            l_iD += 1

            assert (( l_des > 0 ) and ( l_des <= locDefs.xMAX_Desenhos ))

            l_des -= 1
            #l_log.info ( "l_des: " + str ( l_des ))

            #** -----------------------------------------------------------------------------------
            #*  flag solo
            #*/
            l_solo = str ( f_data [ l_iD ] ).upper ()
            l_iD += 1

            #l_log.info ( "l_solo: " + str ( l_solo ))

            #** -----------------------------------------------------------------------------------
            #*  proa atual
            #*/
            l_proa = float ( f_data [ l_iD ] )
            l_iD += 1

            #l_log.info ( "l_proa: " + str ( l_proa ))

            #** -----------------------------------------------------------------------------------
            #*  aeronave no solo ?
            #*/
            if ( "TRUE" == l_solo.upper ()):

                #** -------------------------------------------------------------------------------
                #*  velocidade atual
                #*/
                l_vel = 0

                #** -------------------------------------------------------------------------------
                #*  altitude atual
                #*/
                l_alt = 0

            else:

                #** -------------------------------------------------------------------------------
                #*  velocidade atual
                #*/
                l_vel = int ( f_data [ l_iD ] )
                l_iD += 1

                #l_log.info ( "l_vel: " + str ( l_vel ))

                #** -------------------------------------------------------------------------------
                #*  altitude atual
                #*/
                l_alt = int ( f_data [ l_iD ] )
                l_iD += 1

                #l_log.info ( "l_alt: " + str ( l_alt ))

            #** -----------------------------------------------------------------------------------
            #*  aeronave ativa ?
            #*/
            if (( 'A' == l_stat ) or ( 'a' == l_stat )):

                #** -------------------------------------------------------------------------------
                #*  hora
                #*/
                l_hor = 0

                #** -------------------------------------------------------------------------------
                #*  minuto
                #*/
                l_min = 0

            else:

                #** -------------------------------------------------------------------------------
                #*  hora de entrada
                #*/
                l_hor = int ( f_data [ l_iD ] )
                l_iD += 1

                #l_log.info ( "l_hor: " + str ( l_hor ))

                #** -------------------------------------------------------------------------------
                #*  minuto de entrada
                #*/
                l_min = int ( f_data [ l_iD ] )
                l_iD += 1

                #l_log.info ( "l_min: " + str ( l_min ))

            #** -----------------------------------------------------------------------------------
            #*  converte a hora em tempo
            #*/
            l_lTime = (( l_hor * 60 ) + l_min ) * 60

            #** -----------------------------------------------------------------------------------
            #*  hora de ativação da aeronave < hora do exercício ?
            #*/
            if ( l_lTime < self._lTime ):

                #** -------------------------------------------------------------------------------
                #*  ajusta a hora de ativação da aeronave para a hora do exercício
                #*/
                l_hor = self._oHora [ 0 ]
                l_min = self._oHora [ 1 ]

            #** -----------------------------------------------------------------------------------
            #*  cria a aeronave
            #*/
            l_Anv = clsAnv.clsAnv ()
            assert ( l_Anv )

            #** -----------------------------------------------------------------------------------
            #*  preenche os dados da aeronave
            #*/
            l_Anv.makeAnv ( [ l_stat, l_num, ( l_x, l_y ), l_fam, l_id, l_tipo, l_des,
                              l_solo, l_proa, l_vel, l_alt, ( l_hor, l_min ) ] )

            #** -----------------------------------------------------------------------------------
            #*  insere a aeronave na lista
            #*/
            self._lstAnvs.append ( l_Anv )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de hora do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getHora
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getHora ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oHora )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de vento do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getVento
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVento ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getVento"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oVento )

    #** ===========================================================================================
    #*  rotinas de exportação de dados locais do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getPressao
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPressao ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getPressao"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._uiPressao )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getTemperatura
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTemperatura ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getTemperatura"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._uiTemperatura )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getTeto
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTeto ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getTeto"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._uiTeto )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getVisibilidade
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVisibilidade ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getVisibilidade"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._uiVisibilidade )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de aeronaves do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getAeronave
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAeronave ( self, f_iAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._lstAnvs [ f_iAnv ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getAeronaves
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAeronaves ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._lstAnvs )

    #** ===========================================================================================
    #*  rotinas de exportação de dados do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getEscala ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iEscala )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getFName
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFName ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szExeName )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getIndicativo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getIndicativo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szIndicativo )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getFimExercicio
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFimExercicio ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bFimExercicio )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getMudarEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudarEscala ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bMudarEscala )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getMudouEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudouEscala ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bAltEscala )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getQtdeAnvs
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getQtdeAnvs ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btQtdeAeronaves )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getStatus
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatus ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getTipoExe
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTipoExe ( self ):
                                            
        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getTipoExe"
                                                                        
                                                                            
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )
                                                                                                                            
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )
                                                                                                                                                            
        #** ---------------------------------------------------------------------------------------
        #*/
        return ( "SiCAD" )

    #** ===========================================================================================
    #*  rotinas de exportação dos status do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getAleatorio
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAleatorio ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btAleatorio )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getAcidente
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAcidente ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btAcidente )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getPanePouso
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPanePouso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btPanePouso )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getPaneTaxi
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPaneTaxi ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btPaneTaxi )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::getPaneDecolagem
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPaneDecolagem ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::getHora"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btPaneDecolagem )

    #** ===========================================================================================
    #*  rotinas de importação de dados do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setAcidente
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setAcidente ( self, f_btVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setAcidente"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_btVal in xrange ( 101 )):

            #** -----------------------------------------------------------------------------------
            #*/
            self._btAcidente = f_btVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setEscala ( self, f_iVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_iVal in locDefs.xSET_EscalasValidas ):

            #** -----------------------------------------------------------------------------------
            #*/
            self._iEscala = f_iVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setMudouEscala
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setMudouEscala ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setMudouEscala"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( type ( True ) == type ( f_bVal )):

            #** -----------------------------------------------------------------------------------
            #*/
            self._bAltEscala = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::setPaneDecolagem
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setPaneDecolagem ( self, f_btVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::setPaneDecolagem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( f_btVal in xrange ( 101 )):

            #** -----------------------------------------------------------------------------------
            #*/
            self._btPaneDecolagem = f_btVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de aeronaves do exercício
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsExe::sendExe
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def sendExe ( self, f_ns ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsExe::sendExe"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  envia os dados de configuração
        #*/
        f_ns.sendCnfg ( str ( glbDefs.xMSG_Vrs ) + glbDefs.xMSG_Sep +
                        str ( glbDefs.xMSG_Exe ) + glbDefs.xMSG_Sep + self._szExeName )
        
        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsExe" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_exe = clsExe ( "data/exe/BR001" )

#** ----------------------------------------------------------------------------------------------- *#


