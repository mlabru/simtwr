#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: clsAnv
#*
#*  Descrição: this file is the clsAnv class of the SiCAD. The clsAnv class holds information
#*             about a exercicio and holds the commands the exercicio has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/jun/20  version started
#*  mlabru   2008/nov/11  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    1997/jun/20  version started
#*  2.09-01  2008/nov/11  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsAnv::clsAnv
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a clsAnv
#*  -----------------------------------------------------------------------------------------------
#*/
class clsAnv:

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bSolo = None
        self._btDesenho = None
        self._btFamilia = None
        self._btNumero = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._cStatus = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._dAltitude = None
        self._dProa = None
        self._dVeloc = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._oHora = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._szIdent = None
        self._szTipo = None

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tPosicao = None

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::atrasaAtivacao
    #*  -------------------------------------------------------------------------------------------
    #*  atrasa a hora de ativação da aeronave em um minuto
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def atrasaAtivacao ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::atrasaAtivacao"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  incrementa um minuto
        #*/
        l_iMin = self._oHora [ 1 ] + 1

        #** ---------------------------------------------------------------------------------------
        #*  estourou a hora ?
        #*/
        if ( l_iMin > 59 ):

            #** -----------------------------------------------------------------------------------
            #*  zera o minuto e...
            #*/
            l_iMin = 0

            #** -----------------------------------------------------------------------------------
            #*  ...incrementa a hora
            #*/
            l_iHor = self._oHora [ 0 ] + 1

        else:

            #** -----------------------------------------------------------------------------------
            #*  mantem a hora
            #*/
            l_iHor = self._oHora [ 0 ]

        #** ---------------------------------------------------------------------------------------
        #*  salva a nova hora
        #*/
        self._oHora = ( l_iHor, l_iMin )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::makeAnv
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeAnv ( self, f_lstData ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::makeAnv"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  status da aeronave
        #*/
        self._cStatus = f_lstData [ 0 ]
        #l_log.info ( "_cStatus: " + self._cStatus )

        #** ---------------------------------------------------------------------------------------
        #*  numero
        #*/
        self._btNumero = f_lstData [ 1 ]
        #l_log.info ( u"Número da aeronave: " + str ( self._btNumero ))

        #** ---------------------------------------------------------------------------------------
        #*  posição atual
        #*/
        self._tPosicao = f_lstData [ 2 ]
        #l_log.info ( "Atu _dX: " + str ( self._tPosicao [ 0 ] ) +
        #               ", _dY: " + str ( self._tPosicao [ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  familia
        #*/
        self._btFamilia = f_lstData [ 3 ]
        #l_log.info ( "_btFamilia: " + str ( self._btFamilia ))

        #** ---------------------------------------------------------------------------------------
        #*  identificação
        #*/
        self._szIdent = f_lstData [ 4 ]
        #l_log.info ( "_szIdent: " + self._szIdent )

        #** ---------------------------------------------------------------------------------------
        #*  tipo
        #*/
        self._szTipo = f_lstData [ 5 ]
        #l_log.info ( "_szTipo: " + self._szTipo )

        #** ---------------------------------------------------------------------------------------
        #*  modelo do desenho
        #*/
        self._btDesenho = f_lstData [ 6 ]
        #l_log.info ( "_btDesenho: " + str ( self._btDesenho ))

        #** ---------------------------------------------------------------------------------------
        #*  flag solo
        #*/
        self._bSolo = ( "TRUE" == f_lstData [ 7 ].upper ())
        #l_log.info ( "_bSolo: " + str ( self._bSolo ))

        #** ---------------------------------------------------------------------------------------
        #*  proa atual
        #*/
        self._dProa = f_lstData [ 8 ]
        #l_log.info ( "_dProa: " + str ( self._dProa ))

        #** ---------------------------------------------------------------------------------------
        #*  aeronave em voo ?
        #*/
        if ( not self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  transforma a velocidade de knots para m/s
            #*/
            self._dVeloc = float ( f_lstData [ 9 ] * glbDefs.xCNV_Knots2Ms )
            #l_log.info ( "_dVeloc: " + str ( self._dVeloc ))

            #** -----------------------------------------------------------------------------------
            #*  transformar a altitude de pes para m
            #*/
            self._dAltitude = float ( f_lstData [ 10 ] * glbDefs.xCNV_ft2M )
            #l_log.info ( "_dAltitude: " + str ( self._dAltitude ))

        else:

            #** -----------------------------------------------------------------------------------
            #*/
            self._dVeloc = 0.0
            #l_log.info ( "_dVeloc: " + str ( self._dVeloc ))

            #** -----------------------------------------------------------------------------------
            #*/
            self._dAltitude = 0.0
            #l_log.info ( "_dAltitude: " + str ( self._dAltitude ))

        #** ---------------------------------------------------------------------------------------
        #*  aeronave ativa ?
        #*/
        if (( 'A' == self._cStatus ) or ( 'a' == self._cStatus )):

            #** -----------------------------------------------------------------------------------
            #*  tempo de ativação
            #*/
            self._oHora = ( 0, 0 )

        else:

            #** -----------------------------------------------------------------------------------
            #*  tempo de ativação
            #*/
            self._oHora = f_lstData [ 11 ]

        #l_log.info ( "_oHora: " + str ( self._oHora ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::makeAnvPAR
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeAnvPAR ( self, f_lstData ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::makeAnvPAR"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  status da aeronave
        #*/
        self._cStatus = 'A'
        #l_log.info ( "_cStatus: " + self._cStatus )

        #** ---------------------------------------------------------------------------------------
        #*  numero
        #*/
        self._btNumero = 1
        #l_log.info ( "Numero da aeronave: " + str ( self._btNumero ))

        #** ---------------------------------------------------------------------------------------
        #*  posição atual
        #*/
        self._tPosicao = ( 0, 0 )
        #l_log.info ( "Atu _dX: " + str ( self._tPosicao [ 0 ] ) +
        #               ", _dY: " + str ( self._tPosicao [ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  familia
        #*/
        self._btFamilia = f_lstData [ 0 ]
        #l_log.info ( "_btFamilia: " + str ( self._btFamilia ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo
        #*/
        self._szTipo = f_lstData [ 1 ]
        #l_log.info ( "_szTipo: " + self._szTipo )

        #** ---------------------------------------------------------------------------------------
        #*  identificação
        #*/
        self._szIdent = f_lstData [ 2 ]
        #l_log.info ( "_szIdent: " + self._szIdent )

        #** ---------------------------------------------------------------------------------------
        #*  modelo do desenho
        #*/
        self._btDesenho = None
        #l_log.info ( "_btDesenho: " + str ( self._btDesenho ))

        #** ---------------------------------------------------------------------------------------
        #*  flag solo
        #*/
        self._bSolo = False
        #l_log.info ( "_bSolo: " + str ( self._bSolo ))

        #** ---------------------------------------------------------------------------------------
        #*  proa atual
        #*/
        self._dProa = 0.0
        #l_log.info ( "_dProa: " + str ( self._dProa ))

        #** ---------------------------------------------------------------------------------------
        #*  transforma a velocidade de knots para m/s
        #*/
        self._dVeloc = float ( f_lstData [ 3 ] * glbDefs.xCNV_Knots2Ms )
        #l_log.info ( "_dVeloc: " + str ( self._dVeloc ))

        #** ---------------------------------------------------------------------------------------
        #*  transformar a altitude de pes para m
        #*/
        self._dAltitude = float ( 1000 * glbDefs.xCNV_ft2M )
        #l_log.info ( "_dAltitude: " + str ( self._dAltitude ))

        #** ---------------------------------------------------------------------------------------
        #*  aeronave ativa ?
        #*/
        if (( 'A' == self._cStatus ) or ( 'a' == self._cStatus )):

            #** -----------------------------------------------------------------------------------
            #*  tempo de ativação
            #*/
            self._oHora = ( 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  senão, aeronave não ativa
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  tempo de ativação
            #*/
            self._oHora = ( 0, 0 )

        #l_log.info ( "_oHora: " + str ( self._oHora ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de aeronaves do exercicio
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getDesenho
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDesenho ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btDesenho )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getFamilia
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFamilia ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btFamilia )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getHora
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getHora ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oHora )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getIdent
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getIdent ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szIdent )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getNavAlt
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a altitude da aeronave em metros
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavAlt ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a altitude da aeronave em metros
        #*/
        return ( self._dAltitude )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getNavProa
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavProa ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dProa )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getNavVel
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavVel ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dVeloc )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getNumero
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNumero ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._btNumero )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getPosicao
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPosicao ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tPosicao )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getSolo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getSolo ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bSolo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getStatus
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatus ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::getTipo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTipo ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._szTipo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::setHora
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setHora ( self, f_tVal ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tempo de ativação
        #*/
        self._oHora = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAnv::setProcessed
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setProcessed ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAnv::getDesenho"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  tempo de ativação
        #*/
        self._oHora = ( 99, 99 )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsAnv" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    l_anv = clsAnv ()
    assert ( l_anv )

    l_anv.makeAnv (( 'A', 1, ( 123.45, 678.90 ), 5, "VRG1234", "B767", 1, "False", 123.45, 678.90, 25000, ( 15, 5 )))

    print l_anv

    #** -------------------------------------------------------------------------------------------
    #*
    l_anv = clsAnv ()
    assert ( l_anv )

    l_anv.makeAnv (( 'P', 1, ( 123.45, 678.90 ), 5, "VRG1234", "B767", 1, "True", 123.45, 678.90, 25000, ( 15, 59 )))

    print l_anv

    l_anv.atrasaAtivacao ()

    print l_anv.getHora ()

#** ----------------------------------------------------------------------------------------------- *#
