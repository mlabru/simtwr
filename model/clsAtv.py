#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: clsAtv
#*
#*  Descrição: this file is the flight class of the SiCAD. The flight class holds information about
#*             a flight and holds the commands the flight has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/jun/20  version started
#*  mlabru   2008/jun/20  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/jun/20  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import math

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.cineCalc as cineCalc
import model.clsAnv as clsAnv
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  clsAtv::clsAtv
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*/
class Taxi:

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_bStatus, f_iNo, f_tDestino, f_tPouso, f_dVel ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  status do taxi (congelado/descongelado)
        #*/
        self._bStatus = f_bStatus

        #** ---------------------------------------------------------------------------------------
        #*  no atual
        #*/
        self._iNo = f_iNo

        #** ---------------------------------------------------------------------------------------
        #*  destino taxi
        #*/
        self._tDestino = f_tDestino

        #** ---------------------------------------------------------------------------------------
        #*  parada pouso
        #*/
        self._tPouso = f_tPouso

        #** ---------------------------------------------------------------------------------------
        #*  velocidade
        #*/
        self._dVel = f_dVel

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::getDestino
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDestino ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::getDestino"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  destino taxi
        #*/
        return ( self._tDestino )

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::getNo
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::getNo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  no atual
        #*/
        return ( self._iNo )

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::getPouso
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPouso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::getPouso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  parada pouso
        #*/
        return ( self._tPouso )

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::getStatus
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatus ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::getStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  status do taxi
        #*/
        return ( self._bStatus )

    #** -------------------------------------------------------------------------------------------
    #*  Taxi::getVel
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVel ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "Taxi::getVel"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  velocidade no taxi
        #*/
        return ( self._dVel )

#** -----------------------------------------------------------------------------------------------
#*  clsAtv::clsAtv
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*/
class clsAtv ( clsAnv.clsAnv ):

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  é importante definir todo os parametros da aeronave antes de inclui-la no conjunto
    #*          de aeronaves ativas. As aeronaves são ativadas considerando o vôo normal, isto é,
    #*          StatusVoo 'N'. No modulo Cinematica é definido o TempoAnterior para efeito de
    #*          calculo de movimento inicial. Caso a aeronave fosse incluida antes de se definir o
    #*          Status, o sistema tomaria como verdadeiro o 'LIXO' que estivesse naquela posição no
    #*          momento. Se for diferente de N, o TempoAnterior não seria definido e o primeiro
    #*          movimento poderia mandar a aeronave para a uma posição errada, uma vez que o DeltaT
    #*          seria muito grande.
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_oExe, f_oAer, f_oPrf, f_oAnv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_oAer )
        assert ( f_oAnv )
        assert ( f_oExe )
        assert ( f_oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  inicializa a super class
        #*/
        clsAnv.clsAnv.__init__ ( self )

        #** ---------------------------------------------------------------------------------------
        #*  salva o exercicio
        #*/
        self._oExe = f_oExe
        assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  salva o aerodromo
        #*/
        self._oAer = f_oAer
        assert ( self._oAer )

        #** ---------------------------------------------------------------------------------------
        #*  salva a tabela de performance
        #*/
        self._oPrf = f_oPrf
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  the current no. of alerts on flight
        #*/
        self._iAlerts = 0

        #** ---------------------------------------------------------------------------------------
        #*  if there exists alerts on flight
        #*/
        self._bAlert = False

        #** ---------------------------------------------------------------------------------------
        #*  is the flight selected ?
        #*/
        self._bSel = False

        #** ---------------------------------------------------------------------------------------
        #*  is the flight selected for navigation ?
        #*/
        self._bNav = False

        #** ---------------------------------------------------------------------------------------
        #*  is the flight active ? sure it is...
        #*/
        self._bActive = True

        #** ---------------------------------------------------------------------------------------
        #*  status da aeronave
        #*/
        self._cStatus = 'A'
        #l_log.info ( "_cStatus: " + self._cStatus )

        #** ---------------------------------------------------------------------------------------
        #*  numero
        #*/
        self._btNumero = f_oAnv.getNumero ()
        #l_log.info ( "Numero da aeronave: " + str ( self._btNumero ))

        #** ---------------------------------------------------------------------------------------
        #*  posição atual
        #*/
        self._tPosicao = f_oAnv.getPosicao ()
        #l_log.info ( "Atu _dX: " + str ( self._tPosicao [ 0 ] ) +
        #               ", _dY: " + str ( self._tPosicao [ 1 ] ))

        #** ---------------------------------------------------------------------------------------
        #*  familia
        #*/
        self._btFamilia = f_oAnv.getFamilia ()
        #l_log.info ( "_btFamilia: " + str ( self._btFamilia ))

        #** ---------------------------------------------------------------------------------------
        #*  performance
        #*/
        self._prfFam = self._oPrf.getPerformance ( self._btFamilia )
        assert ( self._prfFam )

        #** ---------------------------------------------------------------------------------------
        #*  identificação
        #*/
        self._szIdent = f_oAnv.getIdent ()
        #l_log.info ( "_szIdent: " + self._szIdent )

        #** ---------------------------------------------------------------------------------------
        #*  tipo
        #*/
        self._szTipo = f_oAnv.getTipo ()
        #l_log.info ( "_szTipo: " + self._szTipo )

        #** ---------------------------------------------------------------------------------------
        #*  modelo do desenho
        #*/
        self._btDesenho = f_oAnv.getDesenho ()
        #l_log.info ( "_btDesenho: " + str ( self._btDesenho ))

        #** ---------------------------------------------------------------------------------------
        #*  flag solo
        #*/
        self._bSolo = f_oAnv.getSolo ()
        #l_log.info ( "_bSolo: " + str ( self._bSolo ))

        #** ---------------------------------------------------------------------------------------
        #*  proa atual
        #*/
        self._dProa = f_oAnv.getNavProa ()
        #l_log.info ( "_dProa: " + str ( self._dProa ))

        #** ---------------------------------------------------------------------------------------
        #*  velocidade
        #*/
        self._dVeloc = f_oAnv.getNavVel ()
        #l_log.info ( "_dVeloc: " + str ( self._dVeloc ))

        #** ---------------------------------------------------------------------------------------
        #*  altitude
        #*/
        self._dAltitude = f_oAnv.getNavAlt ()
        #l_log.info ( "_dAltitude: " + str ( self._dAltitude ))

        #** ---------------------------------------------------------------------------------------
        #*  demanda
        #*/
        self._dProaDem = self._dProa
        self._dVelDem  = self._dVeloc
        self._dAltDem  = self._dAltitude

        #** ---------------------------------------------------------------------------------------
        #*  sentido de curva
        #*/
        self._cSentidoCurva = 'I'

        #** ---------------------------------------------------------------------------------------
        #*  status
        #*/
        self._cStatusVoo = 'N'
        self._cStatusSolo = 'P'
        self._bAltStatus = False

        #** ---------------------------------------------------------------------------------------
        #*  flags de navegação
        #*/
        self._bSel = False

        #** ---------------------------------------------------------------------------------------
        #*  flag show percurso
        #*/
        self._bShowPercurso = False

        #** ---------------------------------------------------------------------------------------
        #*  direção atual
        #*/
        self._dDirAtu = cineCalc.convProa2Direcao (( self._dProa, self._oAer.getDifDeclinacao ()))
        #l_log.info ( "_dDirAtu: " + str ( self._dDirAtu ))

        #** ---------------------------------------------------------------------------------------
        #*  razao de descida
        #*/
        self._dRazaoDescida = 0.0

        #** ---------------------------------------------------------------------------------------
        #*  taxi
        #*/
        self._oTaxi = Taxi ( True, 0, ( 0., 0. ), ( 0., 0. ), 0. )
        assert ( self._oTaxi )

        #** ---------------------------------------------------------------------------------------
        #*  circuito de trafego
        #*/
        self._tCktAtual = ( 0, 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  trajeto minimo
        #*/
        self._lstEtapa = None
        #assert ( self._lstEtapa )

        #** ---------------------------------------------------------------------------------------
        #*  posição de parada apos o pouso
        #*/
        self._tParadaPouso = ( 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  posição da area de dados
        #*/
        self._tPosStrip = (( 0, 0 ), ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  timestamp of the last turn
        #*/
        self._lTempoAnt = 0
        #l_log.info ( "_lTempoAnt: " + str ( self._lTempoAnt ))

        #** ---------------------------------------------------------------------------------------
        #*  flight engine da aeronave
        #*/
        self._fe = None

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  rotinas de exportação de dados da estrutura
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAlert
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAlert ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAlert"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bAlert )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAlerts
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAlerts ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAlerts"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iAlerts )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getCktCab
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCktCab ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getCktCab"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tCktAtual [ 1 ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getCktPst
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCktPst ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getCktPst"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tCktAtual [ 0 ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getCktSeg
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCktSeg ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getCktSeg"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tCktAtual [ 2 ] )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getExe
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getExe ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getExe"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oExe )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getFE
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFE ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getFE"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._fe )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::isActive
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def isActive ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::isActive"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bActive )

    #** ===========================================================================================
    #*  rotinas de exportação de trafego
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getDirecao
    #*  -------------------------------------------------------------------------------------------
    #*  direção anterior da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDirecao ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getDirecao"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dDirAtu )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getMudouStatus
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getMudouStatus ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getMudouStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bAltStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getParadaPouso
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getParadaPouso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getParadaPouso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tParadaPouso )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getPercurso
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPercurso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getPercurso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._lstEtapa )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRazaoDescidaAtu
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRazaoDescidaAtu ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRazaoDescidaAtu"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dRazaoDescida )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getSelected
    #*  -------------------------------------------------------------------------------------------
    #*  aeronave selecionada
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getSelected ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getSelected"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bSel )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getShowPercurso
    #*  -------------------------------------------------------------------------------------------
    #*  aeronave selecionada
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getShowPercurso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getShowPercurso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bShowPercurso )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusEnvio
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusEnvio ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusEnvio"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave no solo ?
        #*/
        if ( self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  movimento no solo ?
            #*/
            #if ( self._cStatusSolo in [ 'T', 'B', 'D', 'Y', 'S' ] ):

                #l_cStatus = 'M'

            #** -----------------------------------------------------------------------------------
            #*  parada ?
            #*/
            #elif ( self._cStatusSolo in [ 'X', 'P', 'G', 'R' ] ):

                #l_cStatus = 'P'

            #** -----------------------------------------------------------------------------------
            #*  senão, acidente
            #*/
            #else:

                #l_cStatus = 'A'

            #** -----------------------------------------------------------------------------------
            #*  solo
            #*/
            l_szStatus = 'S' + self._cStatusSolo

        #** ---------------------------------------------------------------------------------------
        #*  senão, em vôo
        #*/
        else:

            l_szStatus = 'V' + self._cStatusVoo

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_szStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusSolo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusSolo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusSolo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cStatusSolo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStatusVoo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStatusVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cStatusVoo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStrip
    #*  -------------------------------------------------------------------------------------------
    #*  Y da posição atual da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStrip ( self ):


        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStrip"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._tPosStrip )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getStripData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStripData ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getStripData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se a aeronave esta no solo
        #*/
        if ( self._bSolo ):

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave no solo
            #*/
            l_szStat = "S" + self._cStatusSolo

        else:

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave em vôo
            #*/
            l_szStat = "V" + self._cStatusVoo

        #** ---------------------------------------------------------------------------------------
        #*  obtem o centro do aerodromo
        #*/
        l_tCtr = self._oAer.getCentro ()
        assert ( l_tCtr )

        #** ---------------------------------------------------------------------------------------
        #*  calculo do azimute
        #*/
        l_dDist, l_dDir = cineCalc.distanciaDirecao ( l_tCtr, self._tPosicao )

        #** ---------------------------------------------------------------------------------------
        #*  converte a proa em direção
        #*/
        l_dDir = cineCalc.convProa2Direcao (( l_dDir, self._oAer.getDifDeclinacao ()))

        #** ---------------------------------------------------------------------------------------
        #*  calcula o QDM
        #*/
        l_dQDM = ( l_dDir + 180. ) % 360

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return (( l_szStat,
                  self._szIdent,   self._szTipo,
                  self._dAltitude, self._dProa,    self._dVeloc,
                  self._dAltDem,   self._dProaDem, self._dVelDem,
                  l_dDir,          l_dDist,        l_dQDM ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTempoAnt
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTempoAnt ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTempoAnt"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._lTempoAnt )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelTaxi
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelTaxi ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelTaxi"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oTaxi._dVel )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de aeronave do trafego
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  herdadas de clsAnv
    #*/
    #*  clsAnv::getSolo     - clsAtv::getSolo
    #*  clsAnv::getDesenho  - clsAtv::getDesenho
    #*  clsAnv::getStatus   - clsAtv::getStatus
    #*  clsAnv::getIdent    - clsAtv::getIdent
    #*  clsAnv::getTipo     - clsAtv::getTipo
    #*  clsAnv::getNumero   - clsAtv::getNumero
    #*  clsAnv::getFamilia  - clsAtv::getFamilia
    #*  clsAnv::getHora     - clsAtv::getHora
    #*  clsAnv::getPosicao  - clsAtv::getPosicao

    #** ===========================================================================================
    #*  rotinas de exportação de dados de navegação de aeronave do trafego
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  herdadas de clsAnv
    #*/
    #*  clsAnv::getNavAlt   - clsAtv::getNavAlt
    #*  clsAnv::getNavProa  - clsAtv::getNavProa
    #*  clsAnv::getNavVel   - clsAtv::getNavVel

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getNav
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNav ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getNav"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bNav )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getNavAltDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavAltDem ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getNavAltDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dAltDem )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getNavProaDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavProaDem ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getNavProaDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dProaDem )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getNavVelDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavVelDem ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getNavVelDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._dVelDem )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getNavSentido
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getNavSentido ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getNavSentido"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._cSentidoCurva )

    #** ===========================================================================================
    #*  rotinas de exportação de dados de performance de aeronaves
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAceleracaoDep
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAceleracaoDep ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAceleracaoDep"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getAceleracaoDep ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAceleracaoVoo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAceleracaoVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAceleracaoVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getAceleracaoVoo ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAltitudeCircuito
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAltitudeCircuito ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAltitudeCircuito"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getAltitudeCircuito ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAltitudeMaxima
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a altitude maxima para esta aeronave em pes
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAltitudeMaxima ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAltitudeMaxima"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getAltitudeMaxima ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getAltitudeMinima
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a altitude maxima para esta aeronave em pes
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getAltitudeMinima ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getAltitudeMinima"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oAer )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oAer.getAltitude ())

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getCircuito
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCircuito ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getCircuito"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getCircuito ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getDesaceleracaoArr
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDesaceleracaoArr ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getDesaceleracaoArr"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getDesaceleracaoArr ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getDesaceleracaoVoo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getDesaceleracaoVoo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getDesaceleracaoVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getDesaceleracaoVoo ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRaioCurva
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRaioCurva ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRaioCurva"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  esta em vôo normal ?
        #*/
        if ( 'N' == self._cStatusVoo ):

            #** -----------------------------------------------------------------------------------
            #*  é um caça ?
            #*/
            if ( 8 == self._btFamilia ):

                #** -------------------------------------------------------------------------------
                #*  obtem a aceleração angular em rota
                #*/
                l_dOmega = math.radians ( locDefs.VarAngRota8 )

            #** -----------------------------------------------------------------------------------
            #*  senão, aeronave normal
            #*/
            else:

                #** -------------------------------------------------------------------------------
                #*  obtem a aceleração angular em rota
                #*/
                l_dOmega = math.radians ( locDefs.VarAngRota )

        #** ---------------------------------------------------------------------------------------
        #*  senão, não esta em vôo normal
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  é um caça ?
            #*/
            if ( 8 == self._btFamilia ):

                #** -------------------------------------------------------------------------------
                #*  obtem a aceleração angular em trafego
                #*/
                l_dOmega = math.radians ( locDefs.VarAngTrafego8 )

            #** -----------------------------------------------------------------------------------
            #*  senão, aeronave normal
            #*/
            else:

                #** -------------------------------------------------------------------------------
                #*  obtem a aceleração angular em trafego
                #*/
                l_dOmega = math.radians ( locDefs.VarAngTrafego )

        #l_log.info ( "l_dOmega: " + str ( l_dOmega ))

        #** ---------------------------------------------------------------------------------------
        #*  calcula o raio de curvatura da aeronave
        #*/
        l_dRaio = self._dVeloc / l_dOmega
        #l_log.info ( "l_dRaio: " + str ( l_dRaio ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_dRaio )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRazaoDescida
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRazaoDescida ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRazaoDescida"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getRazaoDescida ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRazaoDescidaMax
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRazaoDescidaMax ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRazaoDescidaMax"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getRazaoDescidaMax ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getRazaoSubida
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRazaoSubida ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getRazaoSubida"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getRazaoSubida ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeArr
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeArr ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeArr"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeArr ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeCircuito
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeCircuito ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeCircuito"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeCircuito ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeDep
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeDep ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeDep"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeDep ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeMaxima
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a velocidade maxima em knots
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeMaxima ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeMaxima"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeMaxima ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeMinima
    #*  -------------------------------------------------------------------------------------------
    #*  retorna a velocidade maxima em knots
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeMinima ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeMinima"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  obtem a velocidade minima
        #*/
        if ( 1 == self._btFamilia ):

            #** -----------------------------------------------------------------------------------
            #*  helicopteros
            #*/
            l_iMin = 0.0

        else:

            #** -----------------------------------------------------------------------------------
            #*  outras aeronaves
            #*/
            l_iMin = self.getVelocidadeArr ()

        #l_log.info ( "Velocidade minima: " + str ( l_iMin ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( l_iMin )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeSubida
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeSubida ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeSubida"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeSubida ( self._btFamilia ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getVelocidadeTaxi
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getVelocidadeTaxi ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getVelocidadeTaxi"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condições de execução
        #*/
        assert ( self._oPrf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPrf.getVelocidadeTaxi ( self._btFamilia ))

    #** ===========================================================================================
    #*  rotinas de exportação de dados de taxi
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTaxDestino
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTaxDestino ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTaxDestino"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  destino taxi
        #*/
        return ( self._oTaxi._tDestino )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTaxNo
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTaxNo ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTaxNo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  no atual
        #*/
        return ( self._oTaxi._iNo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTaxPouso
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTaxPouso ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTaxPouso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  parada pouso
        #*/
        return ( self._oTaxi._tPouso )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTaxStatus
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTaxStatus ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTaxStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  status taxi
        #*/
        return ( self._oTaxi._bStatus )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::getTaxVel
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTaxVel ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::getTaxVel"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  velocidade no taxi
        #*/
        return ( self._oTaxi._dVel )

    #** ===========================================================================================
    #*  rotinas de importação de dados
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setActive
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setActive ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setActive"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bActive = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._bActive )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setAlert
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setAlert ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setAlert"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAlert = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  set alert ?
        #*/
        if ( f_bVal ):

            #** -----------------------------------------------------------------------------------
            #*  incrementa o contador de alertas
            #*/
            self._iAlerts += 1

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setCktAtual
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setCktAtual ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setCktAtual"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tCktAtual = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setFE
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setFE ( self, f_oVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setFE"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._fe = f_oVal
        assert ( self._fe )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setMudouStatus
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setMudouStatus ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setMudouStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltStatus = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setNavAltDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setNavAltDem ( self, f_dVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setNavAltDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._dAltDem = f_dVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setNavProaDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setNavProaDem ( self, f_dVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setNavProaDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._dProaDem = f_dVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setNavVelDem
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setNavVelDem ( self, f_dVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setNavVelDem"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._dVelDem = f_dVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setParadaPouso
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setParadaPouso ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setParadaPouso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  trajeto minimo
        #*/
        self._tParadaPouso = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setPercurso
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setPercurso ( self, f_lstVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setPercurso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  ja existe um percurso ?
        #*/
        if ( None != self._lstEtapa ):

            #** -----------------------------------------------------------------------------------
            #*  apaga o percurso existente
            #*/
            del self._lstEtapa

        #** ---------------------------------------------------------------------------------------
        #*  trajeto minimo
        #*/
        self._lstEtapa = f_lstVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setSelected
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setSelected ( self, f_bSel, f_bNav ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setSelected"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( type ( True ) == type ( f_bNav ))
        assert ( type ( True ) == type ( f_bSel ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bNav = f_bNav

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bSel = f_bSel

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setShowPercurso
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setShowPercurso ( self, f_bVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setShowPercurso"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( type ( True ) == type ( f_bVal ))

        #** ---------------------------------------------------------------------------------------
        #*  flag show percurso
        #*/
        self._bShowPercurso = f_bVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setStatusSolo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setStatusSolo ( self, f_cVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setStatusSolo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._cStatusSolo = f_cVal

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltStatus = True

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setStatusVoo
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setStatusVoo ( self, f_cVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setStatusVoo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._cStatusVoo = f_cVal

        #** ---------------------------------------------------------------------------------------
        #*/
        self._bAltStatus = True

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setStrip
    #*  -------------------------------------------------------------------------------------------
    #*  status da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setStrip ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setStrip"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tPosStrip = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setTaxDestino
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setTaxDestino ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setTaxDestino"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  destino taxi
        #*/
        self._oTaxi._tDestino = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  clsAtv::setTaxStatus
    #*  -------------------------------------------------------------------------------------------
    #*  preenche os dados da aeronave
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def setTaxStatus ( self, f_tVal ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsAtv::setTaxStatus"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  status taxi
        #*/
        self._oTaxi._bStatus = f_tVal

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsAtv" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
