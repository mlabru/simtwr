#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SICAD
#*  Classe...: cineClss
#*
#*  Descricao: this file is the flight class of the SiCAD. The flight class holds information about
#*             a flight and holds the commands the flight has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  cineClss::cineClss
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a flight
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
class cineClss:

    #** -------------------------------------------------------------------------------------------
    #*  cineClss::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  setting the variables pertaining to scope and view
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_fe, f_oAer, f_oAtv, f_st, f_ns ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "cineClss::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_fe )
        assert ( f_ns )
        assert ( f_st )
        assert ( f_oAer )
        assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  salva o flight engine
        #*/
        self._fe = f_fe

        #** ---------------------------------------------------------------------------------------
        #*  salva os dados do aerodromo
        #*/
        self._oAer = f_oAer

        #** ---------------------------------------------------------------------------------------
        #*  salva os dados da aeronave
        #*/
        self._oAtv = f_oAtv

        #** ---------------------------------------------------------------------------------------
        #*  obtem o exercicio
        #*/
        self._oExe = self._oAtv.getExe ()
        assert ( self._oExe )

        #** ---------------------------------------------------------------------------------------
        #*  salva o system time
        #*/
        self._st = f_st

        #** ---------------------------------------------------------------------------------------
        #*  salva o socket de envio
        #*/
        self._ns = f_ns

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  CALLBACKS
    #*  ===========================================================================================
    #*/

    #** ===========================================================================================
    #*  PROCEDURES LEVEL 2
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  cineClss::sendData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def sendData ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "cineClss::sendData"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condicoes para execucao
        #*/
        assert ( self._ns )
        assert ( self._st )
        assert ( self._oAtv )
        
        if ( not self._oAtv._bActive ):

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return

        #** ---------------------------------------------------------------------------------------
        #*  monta o buffer de envio
        #*/
        l_szBuff = str ( glbDefs.xNET_Vers )           + glbDefs.xMSG_Sep + \
                   str ( glbDefs.xMSG_Dat )            + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._szIdent )         + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._szTipo )          + glbDefs.xMSG_Sep + \
                   str ( self._st.obtemHoraSim ())     + glbDefs.xMSG_Sep + \
                   str ( self._oAtv.getStatusEnvio ()) + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._tPosicao [ 0 ] )  + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._tPosicao [ 1 ] )  + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._dProa )           + glbDefs.xMSG_Sep + \
                   str ( self._oAtv._dAltitude )

        #** ---------------------------------------------------------------------------------------
        #*  envia os dados para o controle
        #*/
        self._ns.sendData ( l_szBuff )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "cineClss" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( logging.DEBUG )

#** ----------------------------------------------------------------------------------------------- *#
