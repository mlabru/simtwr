#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SICAD
#*  Classe...: cineCalc
#*
#*  Descricao:
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import math

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::calcDirecao
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def calcDirecao ( f_tPto1, f_tPto2 ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::calcDirecao"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  calcula os deltas entre os ponto
    #*/
    l_dDltX = f_tPto2 [ 0 ] - f_tPto1 [ 0 ]
    #l_log.info ( "l_dDltX: " + str ( l_dDltX ))

    l_dDltY = f_tPto2 [ 1 ] - f_tPto1 [ 1 ]
    #l_log.info ( "l_dDltY: " + str ( l_dDltY ))

    #** -------------------------------------------------------------------------------------------
    #*  os pontos estao na mesma coluna ?
    #*/
    if ( 0. == l_dDltX ):

        #** ---------------------------------------------------------------------------------------
        #*  os pontos estao na mesma linha ?
        #*/
        if ( 0. == l_dDltY ):

            #** -----------------------------------------------------------------------------------
            #*  X e Y sao o mesmo ponto, angulo zero entre eles
            #*/
            l_dAng = 0.

        #** ---------------------------------------------------------------------------------------
        #*  y2 > y1 ?
        #*/
        elif ( l_dDltY > 0. ):

            #** -----------------------------------------------------------------------------------
            #*  y2 > y1, logo 180 graus entre eles (pi)
            #*/
            l_dAng = math.pi / 2.

        #** ---------------------------------------------------------------------------------------
        #*  senao, y2 < y1
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  y2 < y1, logo -180 graus entre eles (3pi)
            #*/
            l_dAng = 3. * math.pi / 2.

    #** -------------------------------------------------------------------------------------------
    #*  senao, nao estao na mesma coluna
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*  calcula o angulo entre eles
        #*/
        l_dAng = math.atan ( l_dDltY / l_dDltX )

    #** -------------------------------------------------------------------------------------------
    #*  converte o angulo em graus
    #*/
    l_dDeg = math.degrees ( l_dAng )
    #l_log.info ( "l_dDeg: " + str ( l_dDeg ))

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( l_dDltX < 0. ):

        #** ---------------------------------------------------------------------------------------
        #*  x2 < x1
        #*/
        l_dDeg += 180.

    #** -------------------------------------------------------------------------------------------
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*  x2 > x1 ?
        #*/
        if ( l_dDeg < 0. ):

            #** -----------------------------------------------------------------------------------
            #*/
            l_dDeg += 360.

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_dDeg )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::convProa2Direcao
#*  -----------------------------------------------------------------------------------------------
#*  converte uma proa para um angulo nos eixos cartesianos
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def convProa2Direcao ( f_tProa ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::convProa2Direcao"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  proa e direcao
    #*/
    l_dProa = f_tProa [ 0 ]

    #** -------------------------------------------------------------------------------------------
    #*  normaliza a proa (I)
    #*/
    while ( l_dProa < 0.0 ):

        l_dProa += 360.0

    #** -------------------------------------------------------------------------------------------
    #*  normaliza a proa (II)
    #*/
    while ( l_dProa >= 360.0 ):

        l_dProa -= 360.0

    #** -------------------------------------------------------------------------------------------
    #*  converte a proa para radianos
    #*/
    l_dProa = math.radians ( l_dProa )

    #** -------------------------------------------------------------------------------------------
    #*  calcula as componentes X e Y da proa
    #*/
    l_dProaY = math.sin ( l_dProa )
    l_dProaX = math.cos ( l_dProa )

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( l_dProaX > 0.0 ):

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_dProaY > 0.0 ):

            #** -----------------------------------------------------------------------------------
            #*  direcao
            #*/
            l_dDir = math.asin ( l_dProaX )

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  componentes da direcao
            #*/
            l_dXd = l_dProaX
            l_dYd = l_dProaY

            #** -----------------------------------------------------------------------------------
            #*  direcao
            #*/
            l_dDir = math.atan2 ( l_dXd, l_dYd )

    #** -------------------------------------------------------------------------------------------
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( l_dProaY > 0.0 ):

            #** -----------------------------------------------------------------------------------
            #*  componentes da direcao
            #*/
            l_dXd = l_dProaX
            l_dYd = l_dProaY

            #** -----------------------------------------------------------------------------------
            #*  direcao
            #*/
            l_dDir = math.atan2 ( l_dXd, l_dYd ) + ( 2. * math.pi )

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  direcao
            #*/
            l_dDir = math.pi + math.fabs ( math.asin ( l_dProaX ))

    #** -------------------------------------------------------------------------------------------
    #*  converte a direcao para graus
    #*/
    l_dDir = math.degrees ( l_dDir )

    #** -------------------------------------------------------------------------------------------
    #*  zera infinitesimais
    #*/
    if ( math.fabs ( l_dDir ) < 1.0E-1 ):

        l_dDir = 0.0

    #** -------------------------------------------------------------------------------------------
    #*  adapta a direcao da aeronave ao norte magnetico
    #*/
    l_dDir -= f_tProa [ 1 ]

    #** -------------------------------------------------------------------------------------------
    #*  normaliza a direcao (I)
    #*/
    while ( l_dDir < 0.0 ):

        l_dDir += 360.0

    #** -------------------------------------------------------------------------------------------
    #*  normaliza a direcao (II)
    #*/
    while ( l_dDir >= 360.0 ):

        l_dDir -= 360.0

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_dDir )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaAleatoriaPouso
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return a distancia retornada refere-se a distancia ate ao inicio da cabeceira
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaAleatoriaPouso ( f_uiPstCmp ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaAleatoriaPouso"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  nao estao sendo considerada a aleatoreidade no pouso para que todas as aeronaves do
    #*  PeelOff pousem no mesmo ponto e saiam na mesma posicao da pista principal para o taxi.
    #*/
    if ( 0 ):

        #** ---------------------------------------------------------------------------------------
        #*/
        l_dMedia = f_uiPstCmp / 10.0

        #** ---------------------------------------------------------------------------------------
        #*/
        #Sigma = l_dMedia / 3.26

        #** ---------------------------------------------------------------------------------------
        #*/
        #R1 = Lib.Rand ()
        #R2 = Lib.Rand ()

        #** ---------------------------------------------------------------------------------------
        #*/
        #X1 = math.sqrt ( -2.0 * math.log ( R1 )) * math.cos ( 2.0 * math.pi * R2 )

        #** ---------------------------------------------------------------------------------------
        #*/
        #X = l_dMedia + ( X1 * Sigma )

    #** -------------------------------------------------------------------------------------------
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*/
        l_dMedia = f_uiPstCmp / 15.0

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_dMedia )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaDirecao
#*  -----------------------------------------------------------------------------------------------
#*  calcula a distancia e direcao entre dois pontos
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaDirecao ( f_tPto1, f_tPto2 ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaDirecao"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  calcula a distancia entra os pontos
    #*/
    l_dDist = distanciaEntrePontos ( f_tPto1, f_tPto2 )

    #** -------------------------------------------------------------------------------------------
    #*  calcula a distancia entra os pontos
    #*/
    l_dDeg = calcDirecao ( f_tPto1, f_tPto2 )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  retorna a distancia e o angulo entre os pontos
    #*/
    return ( l_dDist, l_dDeg )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaEntrePontos
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaEntrePontos ( f_tPto1, f_tPto2 ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaEntrePontos"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  calcula os deltas entre os pontos
    #*/
    l_dDltX = f_tPto1 [ 0 ] - f_tPto2 [ 0 ]  # dX
    #l_log.info ( "l_dDltX: " + str ( l_dDltX ))

    l_dDltY = f_tPto1 [ 1 ] - f_tPto2 [ 1 ]  # dY
    #l_log.info ( "l_dDltY: " + str ( l_dDltY ))

    #** -------------------------------------------------------------------------------------------
    #*  calcula a distancia euclidiana entre os pontos
    #*/
    l_dVal = math.sqrt (( l_dDltX ** 2 ) + ( l_dDltY ** 2 ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  retorna a distancia euclidiana entre os pontos
    #*/
    return ( l_dVal )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaInicioCurva
#*  -----------------------------------------------------------------------------------------------
#*  calcula a distancia entre o ponto de inicio da curva ate a reta em
#*  questao
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaInicioCurva ( f_dDirAtu, f_dDirReta, f_dRaio ):

    #/ nome do metodo (logger)
    #/ ---------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaInicioCurva"


    #** --------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** --------------------------------------------------------------------------------------------
    #*/
    l_dTeta = 180.0 - math.fabs ( f_dDirAtu - f_dDirReta )

    #** --------------------------------------------------------------------------------------------
    #*/
    l_dTeta = math.radians ( l_dTeta )

    #** --------------------------------------------------------------------------------------------
    #*/
    l_dDist = f_dRaio / math.tan ( l_dTeta / 2.0 )

    #** --------------------------------------------------------------------------------------------
    #*/
    l_dDist *= math.sin ( l_dTeta )

    #** --------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** --------------------------------------------------------------------------------------------
    #*/
    return ( l_dDist )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaPontoReta
#*  -----------------------------------------------------------------------------------------------
#*  calcula a distancia (com sinal) de um ponto a uma reta no plano
#*  -----------------------------------------------------------------------------------------------
#*  @param  f_tPto - tupla ponto ( x, y )
#*  @param  f_tPto - tupla reta ( a, b, c )
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaPontoReta ( f_tPto, f_tReta ):

    #/ nome do metodo (logger)
    #/ ---------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaPontoReta"


    #** --------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** --------------------------------------------------------------------------------------------
    #*  calcula a raiz
    #*/
    l_dSqrt = math.sqrt (( f_tReta [ 0 ] ** 2 ) + ( f_tReta [ 1 ] ** 2 ))
    #assert ( 0.0 != l_dSqrt )

    #** --------------------------------------------------------------------------------------------
    #*/
    l_dVal = (( f_tReta [ 0 ] * f_tPto [ 0 ] ) +
              ( f_tReta [ 1 ] * f_tPto [ 1 ] ) + f_tReta [ 2 ] )

    #** --------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** --------------------------------------------------------------------------------------------
    #*/
    return ( l_dVal / l_dSqrt )

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::distanciaPontoRetaABS
#*  -----------------------------------------------------------------------------------------------
#*  calcula a distancia de um ponto a uma reta no plano
#*  -----------------------------------------------------------------------------------------------
#*  @param  f_tPto - tupla ponto ( x, y )
#*  @param  f_tPto - tupla reta ( a, b, c )
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def distanciaPontoRetaABS ( f_tPto, f_tReta ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::distanciaPontoRetaABS"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( math.fabs ( distanciaPontoReta ( f_tPto, f_tReta )))

#** -----------------------------------------------------------------------------------------------
#*  cineCalc::sentidoRotacao
#*  -----------------------------------------------------------------------------------------------
#*  verifica se a aeronave deve girar para a esquerda, direita ou manter
#*  a direcao atual
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return I = Igual H = Horario A = Anti-horario
#*  -----------------------------------------------------------------------------------------------
#*/
def sentidoRotacao ( f_dDir, f_dDem ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "cineCalc::sentidoRotacao"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  obtem a direcao atual
    #*/
    l_iDir = int ( round ( f_dDir ))

    #** -------------------------------------------------------------------------------------------
    #*  obtem a direcao de demanda
    #*/
    l_iDem = int ( round ( f_dDem ))

    #** -------------------------------------------------------------------------------------------
    #*  direcao atual = demanda ?
    #*/
    if ( l_iDem == l_iDir ):

        #** ---------------------------------------------------------------------------------------
        #*  se for, mantem o sentido
        #*/
        l_cSentido = 'I'

    #** -------------------------------------------------------------------------------------------
    #*  senao, direcao atual != demanda
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*  direcao demanda < atual ?
        #*/
        if ( l_iDem < l_iDir ):

            #** -----------------------------------------------------------------------------------
            #*  ajusta a demanda
            #*/
            l_iDem += 360

        #** ---------------------------------------------------------------------------------------
        #*/
        if (( l_iDem - l_iDir ) > 180 ):

            #** -----------------------------------------------------------------------------------
            #*  se for, sentido horario
            #*/
            l_cSentido = 'H'

        #** ---------------------------------------------------------------------------------------
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  se nao, sentido anti-horario
            #*/
            l_cSentido = 'A'

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_cSentido )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "cineCalc" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( logging.DEBUG )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*
    print "Direcao: " + str ( convProa2Direcao ((  0.0, -14.0 )))
    print "Direcao: " + str ( convProa2Direcao ((  0.0,   0.0 )))
    print "Direcao: " + str ( convProa2Direcao ((  0.0,  14.0 )))
    print "Direcao: " + str ( convProa2Direcao (( 76.0,  14.0 )))
    print "Direcao: " + str ( convProa2Direcao (( 51.0,  14.0 )))
    print "Direcao: " + str ( convProa2Direcao (( 25.0,  14.0 )))

    print "Rotacao: " + str ( sentidoRotacao ( 0.0,   0.0 ))
    print "Rotacao: " + str ( sentidoRotacao ( 0.0, 179.0 ))
    print "Rotacao: " + str ( sentidoRotacao ( 0.0, 180.0 ))
    print "Rotacao: " + str ( sentidoRotacao ( 0.0, 181.0 ))

#** ----------------------------------------------------------------------------------------------- *#
