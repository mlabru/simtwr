#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SICAD
#*  Classe...: clsFig
#*
#*  Descricao: this file is the clsFig class of the SiCAD.
#*             The clsFig class holds information about a exercicio
#*             and holds the commands the exercicio has been given.
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  clsFig::clsFig
#*  -----------------------------------------------------------------------------------------------
#*  the object holding all information concerning a clsFig
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
class clsFig:

    #** -------------------------------------------------------------------------------------------
    #*  clsFig::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  valores
        #*/
        self._iCor  = 0
        self._iRaio = 0
        self._iVert = 0
        self._iTipo = 0

        #** ---------------------------------------------------------------------------------------
        #*  pontos
        #*/
        self._ptoIni = ( 0, 0 )
        self._ptoCtr = ( 0, 0 )
        self._ptoFim = ( 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  poligono
        #*/
        self._oPoly = []

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadCirculo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadCirculo ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadCirculo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le o centro (x, y) do circulo
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le o raio do circulo
        #*/
        self._iRaio = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iRaio: " + str ( self._iRaio ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do circulo
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_CIRCULO

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadCircunferencia
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadCircunferencia ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadCircunferencia"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le o centro (x, y) da circunferencia
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le o raio da circunferencia
        #*/
        self._iRaio = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iRaio: " + str ( self._iRaio ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor da circunferencia
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_CIRCUNFERENCIA

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadFixo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadFixo ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadFixo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do centro do fixo
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do fixo
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_FIXO

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadLinha
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadLinha ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadLinha"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do inicio da linha
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoIni = ( l_dX, l_dY )
        #l_log.info ( "_oIni: " + str ( self._ptoIni ))

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do final da linha
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoFim = ( l_dX, l_dY )
        #l_log.info ( "_oFim: " + str ( self._ptoFim ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor da linha
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_LINHA

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadLinhasCabec
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadLinhasCabec ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadLinhasCabec"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do inicio das linhas
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoIni = ( l_dX, l_dY )
        #l_log.info ( "_oIni: " + str ( self._ptoIni ))

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do final das linhas
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoFim = ( l_dX, l_dY )
        #l_log.info ( "_oFim: " + str ( self._ptoFim ))

        #** ---------------------------------------------------------------------------------------
        #*  cor das linhas
        #*/
        self._iCor = 0
        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_LINHAS_CABEC

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadLinhaPista
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadLinhaPista ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadLinhaPista"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do inicio das linhas
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoIni = ( l_dX, l_dY )
        #l_log.info ( "_oIni: " + str ( self._ptoIni ))

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do final das linhas
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoFim = ( l_dX, l_dY )
        #l_log.info ( "_oFim: " + str ( self._ptoFim ))

        #** ---------------------------------------------------------------------------------------
        #*  cor das linhas
        #*/
        self._iCor = 0
        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_LINHA_PISTA

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadNDB
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadNDB ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadNDB"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do centro do NDB
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do NDB
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_NDB

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadObstaculo
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadObstaculo ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadObstaculo"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do centro do obstaculo
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do obstaculo
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_OBSTACULO

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadPoligono
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadPoligono ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadPoligono"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        #/!D! printf ( "f_btFig: [%d]\n", f_btFig );

        #** ---------------------------------------------------------------------------------------
        #*  le o numero de vertices do poligono
        #*/
        self._iVert = int ( f_data [ f_iI ] )
        #l_log.info ( "_iVert: " + str ( self._iVert ))

        f_iI += 1

        #** ---------------------------------------------------------------------------------------
        #*  carrega todos os vertices do poligono
        #*/
        for l_iJ in xrange ( self._iVert ):

            #** -----------------------------------------------------------------------------------
            #*  le as coordenadas (x, y) do vertice do poligono
            #*/
            l_dX = float ( f_data [ f_iI ] )
            f_iI += 1

            l_dY = float ( f_data [ f_iI ] )
            f_iI += 1

            l_Pto = ( l_dX, l_dY )
            #l_log.info ( "l_Pto: " + str ( l_Pto ))

            #** -----------------------------------------------------------------------------------
            #*  insere o vertice no poligono
            #*/
            self._oPoly.append ( l_Pto )

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do poligono
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_POLIGONO

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadPonto
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadPonto ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadPonto"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do ponto
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do ponto
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_PONTO

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** -------------------------------------------------------------------------------------------
    #*  aerCls::loadVOR
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def loadVOR ( self, f_iI, f_data ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::loadVOR"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  le as coordenadas (x, y) do centro do VOR
        #*/
        l_dX = float ( f_data [ f_iI ] )
        f_iI += 1

        l_dY = float ( f_data [ f_iI ] )
        f_iI += 1

        self._ptoCtr = ( l_dX, l_dY )
        #l_log.info ( "_oCtr: " + str ( self._ptoCtr ))

        #** ---------------------------------------------------------------------------------------
        #*  le a cor do VOR
        #*/
        self._iCor = int ( f_data [ f_iI ] )
        f_iI += 1

        #l_log.info ( "_iCor: " + str ( self._iCor ))

        #** ---------------------------------------------------------------------------------------
        #*  tipo de figura
        #*/
        self._iTipo = locDefs.xFIG_VOR

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( f_iI )

    #** ===========================================================================================
    #*  rotinas de leitura dos dados das figuras do aerodromo
    #*  ===========================================================================================
    #*/

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getCor
    #*  -------------------------------------------------------------------------------------------
    #*  cor da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCor ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iCor )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getCtr
    #*  -------------------------------------------------------------------------------------------
    #*  ponto central da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getCtr ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._ptoCtr )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getFim
    #*  -------------------------------------------------------------------------------------------
    #*  ponto final da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getFim ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._ptoFim )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getIni
    #*  -------------------------------------------------------------------------------------------
    #*  ponto inicial da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getIni ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._ptoIni )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getRaio
    #*  -------------------------------------------------------------------------------------------
    #*  raio da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getRaio ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iRaio )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getTipo
    #*  -------------------------------------------------------------------------------------------
    #*  tipo da figura
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getTipo ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._iTipo )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getPoly
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPoly ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPoly )

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getPolyNVert
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPolyNVert ( self ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( len ( self._oPoly ))

    #** -------------------------------------------------------------------------------------------
    #*  clsAer::getPolyPto
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getPolyPto ( self, f_iNVrt ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "clsFig::getCor"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( self._oPoly [ f_iNVrt ] )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "clsFig" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( logging.DEBUG )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*

#** ----------------------------------------------------------------------------------------------- */
