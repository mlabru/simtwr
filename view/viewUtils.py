#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: pyACME
#*  Classe...: viewUtils
#*
#*  Descrição: dá início ao sistema, inicializar todas as variáveis globais utilizadas no sistema
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  defines
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ Python library
#/ ------------------------------------------------------------------------------------------------
import os

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
from pygame.locals import *

#/ pyACME / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ coodenadas inferiores da window
#/ ------------------------------------------------------------------------------------------------
w_fWXLo = 0.0
w_fWYLo = 0.0

#/ coodenadas superiores da window
#/ ------------------------------------------------------------------------------------------------
w_fWXHi = 1.0
w_fWYHi = 1.0

#/ coodenadas inferiores da viewport
#/ ------------------------------------------------------------------------------------------------
w_fVXLo = 1.0
w_fVYLo = 1.0

#/ coodenadas superiores da viewport
#/ ------------------------------------------------------------------------------------------------
w_fVXHi = 1.0
w_fVYHi = 1.0

#/ fator de escala em X e Y
#/ ------------------------------------------------------------------------------------------------
w_fEscX = 1.0
w_fEscY = 1.0

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::checkClippingAer
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def checkClippingAer ( f_oAer, f_tPos, f_fOff ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::checkClippingAer"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return (( f_tPos [ 0 ] < ( f_oAer.getJanelaXSup () - f_fOff )) and
            ( f_tPos [ 0 ] > ( f_oAer.getJanelaXInf () + f_fOff )) and
            ( f_tPos [ 1 ] < ( f_oAer.getJanelaYSup () - f_fOff )) and
            ( f_tPos [ 1 ] > ( f_oAer.getJanelaYInf () + f_fOff )))

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::checkClippingScr
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def checkClippingScr ( f_tPos, f_rtIcn ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::checkClippingScr"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  obtem a largura da area de scope
    #*/
    l_fW = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 0 ] - 1

    #** -------------------------------------------------------------------------------------------
    #*  obtem a altura da area de scope
    #*/
    l_fH = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 1 ] - 1

    #** -------------------------------------------------------------------------------------------
    #*  largura do icone
    #*/
    l_fWI = f_rtIcn.width / 2.

    #** -------------------------------------------------------------------------------------------
    #*  altura da area
    #*/
    l_fHI = f_rtIcn.height / 2.

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ((( f_tPos [ 0 ] - l_fWI ) >= 0. ) and (( f_tPos [ 0 ] + l_fWI ) <= l_fW ) and
            (( f_tPos [ 1 ] - l_fHI ) >= 0. ) and (( f_tPos [ 1 ] + l_fHI ) <= l_fH ))

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::device2Scale
#*  -----------------------------------------------------------------------------------------------
#*  converte coordenadas de tela para coordenadas definidas pelo usuario
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def device2Scale ( f_tPos ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::device2Scale"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  obtem a largura da area de scope
    #*/
    l_fW = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 0 ] - 1
    #l_log.info ( "l_fW: " + str ( l_fW ))

    #** -------------------------------------------------------------------------------------------
    #*  obtem a altura da area de scope
    #*/
    l_fH = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 1 ] - 1
    #l_log.info ( "l_fH: " + str ( l_fH ))

    #** -------------------------------------------------------------------------------------------
    #*  de-escala a coluna
    #*/
    l_fX = float ( f_tPos [ 0 ] ) / l_fW
    #l_log.info ( "l_fX: " + str ( l_fX ))

    #** -------------------------------------------------------------------------------------------
    #*  de-escala a linha
    #*/
    l_fY = 1. - ( float ( f_tPos [ 1 ] ) / l_fH )
    #l_log.info ( "l_fY: " + str ( l_fY ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return (( l_fX, l_fY ))

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::escalaCenario
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  f_oExe - Exercicio
#*  @param  f_oAer - Aerodromo
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def escalaCenario ( f_oExe, f_oAer ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::escalaCenario"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  verifica parametros de entrada
    #*/
    #assert ( f_oExe )
    #assert ( f_oAer )

    #** -------------------------------------------------------------------------------------------
    #*  obtem a escala do exercicio
    #*/
    l_iEsc = f_oExe.getEscala ()

    #** -------------------------------------------------------------------------------------------
    #*  escala 1 ?
    #*/
    if ( 1 == l_iEsc ):

        #** ---------------------------------------------------------------------------------------
        #*  escala 1
        #*/
        f_oAer.setJanelaXInf ( 0.0 )
        f_oAer.setJanelaYInf ( 0.0 )

        f_oAer.setJanelaXSup ( f_oAer.getJanelaComp ())
        f_oAer.setJanelaYSup ( f_oAer.getJanelaLarg ())

    #** -------------------------------------------------------------------------------------------
    #*  escala 2 ?
    #*/
    elif ( 2 == l_iEsc ):

        #** ---------------------------------------------------------------------------------------
        #*  escala 2
        #*/
        f_oAer.setJanelaXInf ( -9000.0 + f_oAer.getJanelaComp () / 2.0 ) # 5 Milhas
        f_oAer.setJanelaYInf ( -6750.0 + f_oAer.getJanelaLarg () / 2.0 )

        f_oAer.setJanelaXSup (  9000.0 + f_oAer.getJanelaComp () / 2.0 )
        f_oAer.setJanelaYSup (  6750.0 + f_oAer.getJanelaLarg () / 2.0 )

    #** -------------------------------------------------------------------------------------------
    #*  escala 3 ?
    #*/
    elif ( 3 == l_iEsc ):

        #** ---------------------------------------------------------------------------------------
        #*  escala 3
        #*/
        f_oAer.setJanelaXInf ( -28000.0 + f_oAer.getJanelaComp () / 2.0 ) # 15 Milhas
        f_oAer.setJanelaYInf ( -21000.0 + f_oAer.getJanelaLarg () / 2.0 ) # 11.25 Milhas

        f_oAer.setJanelaXSup (  28000.0 + f_oAer.getJanelaComp () / 2.0 )
        f_oAer.setJanelaYSup (  21000.0 + f_oAer.getJanelaLarg () / 2.0 )

    #** -------------------------------------------------------------------------------------------
    #*  outra escala ?
    #*/
    else: pass

        #** ---------------------------------------------------------------------------------------
        #*  outra escala (nao deveria acontecer !!!)
        #*/
        #l_log.info ( "Escala: [%d], invalida !" % ( l_iEsc ))

        #** ---------------------------------------------------------------------------------------
        #*  outra escala (nao deveria acontecer !!!)
        #*/
        #assert ( l_iEsc in locDefs.xSET_EscalasValidas )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::getCor
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def getCor ( f_btCor ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::getCor"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  faz o translate de cores
    #*/
    if   ( 0 == f_btCor ):

        l_tCor = glbDefs.xCOR_blue

    elif ( 1 == f_btCor ):

        l_tCor = glbDefs.xCOR_gray60

    elif ( 2 == f_btCor ):

        l_tCor = glbDefs.xCOR_cyan

    elif ( 3 == f_btCor ):

        l_tCor = glbDefs.xCOR_darkgreen

    elif ( 4 == f_btCor ):

        l_tCor = glbDefs.xCOR_red

    elif ( 5 == f_btCor ):

        l_tCor = glbDefs.xCOR_yellow

    elif ( 6 == f_btCor ):

        l_tCor = glbDefs.xCOR_brown

    elif ( 7 == f_btCor ):

        l_tCor = glbDefs.xCOR_white

    elif ( f_btCor >= 8 ):

        l_tCor = glbDefs.xCOR_black

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** --------------------------------------------------------------------------------------------
    #*/
    return ( l_tCor )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::loadImage
#*  -----------------------------------------------------------------------------------------------
#*  carrega as imagens
#*  -----------------------------------------------------------------------------------------------
#*  @param  f_szFName - nome do arquivo a abrir
#*  @param  f_bTrans  - flag transparencia
#*  @param  f_lstRect - lista de retangulos
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*  @notes  1 - quando recebe apenas o nome do arquivo, abre e retorna a imagem
#*
#*  @notes  2 - quando recebe uma lista de retangulos em 'f_lstImg', extrai pedacos
#*              da imagem e retorna uma lista com esses pedacos
#*
#*  @notes  3 - quando recebe True como valor em 'f_bTrans', captura a cor do pixel
#*              da coordenada (0, 0) e torna ela transparente
#*  -----------------------------------------------------------------------------------------------
#*/
def loadImage ( f_szFName, f_bTrans = False, f_lstRect = None ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::loadImage"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  monta o filepath do arquivo de imagem 
    #*/
    f_szFName = os.path.join ( glbDefs.xDIR_IMG, f_szFName )
    #assert ( f_szFName )

    #** -------------------------------------------------------------------------------------------
    #*  carrega a imagem
    #*/
    l_image = pygame.image.load ( f_szFName )
    #assert ( l_image )
    
    #** -------------------------------------------------------------------------------------------
    #*  eh uma imagens unica ?
    #*/
    if ( f_lstRect is None ):

        #** ---------------------------------------------------------------------------------------
        #*  transparencia ?
        #*/
        l_Ret = l_image
        
        #** ---------------------------------------------------------------------------------------
        #*  transparencia ?
        #*/
        if ( f_bTrans ):

            #** -----------------------------------------------------------------------------------
            #*  converte a imagem com transparencia
            #*/
            l_Ret.convert_alpha ()

            #** -----------------------------------------------------------------------------------
            #*  obtem a cor de transparencia
            #*/
            l_clrKey = l_Ret.get_at (( 0, 0 ))
            #assert ( l_clrKey )

            #** -----------------------------------------------------------------------------------
            #*  aplica na imagem
            #*/
            l_Ret.set_colorkey ( l_clrKey, RLEACCEL )

        else:
        
            #** -----------------------------------------------------------------------------------
            #*  converte a imagem
            #*/
            l_Ret.convert ()

        #l_image.set_colorkey ( l_image.get_at (( 0, 0 )))

    #** -------------------------------------------------------------------------------------------
    #*  senao, eh uma lista de areas
    #*/
    else:

        #** ---------------------------------------------------------------------------------------
        #*  inicia a lista de imagens
        #*/
        l_lstImgs = []

        #** ---------------------------------------------------------------------------------------
        #*  para cada um dos retangulos na lista de retangulos...
        #*/
        for l_rect in f_lstRect:

            #** -----------------------------------------------------------------------------------
            #*  cria uma superficie do tamanho do retangulo
            #*/
            l_srfImg = pygame.Surface ( Rect ( l_rect ).size ).convert ()
            #assert ( l_srfImg )

            l_srfImg.set_colorkey ( None )

            #** -----------------------------------------------------------------------------------
            #*  transfere a imagem para a superficie
            #*/
            l_srfImg.blit ( l_image, ( 0, 0 ), l_rect )

            #** -----------------------------------------------------------------------------------
            #*  transparencia ?
            #*/
            if ( f_bTrans ):

                #** -------------------------------------------------------------------------------
                #*  obtem a cor de transparencia
                #*/
                l_clrKey = l_srfImg.get_at (( 0, 0 ))
                #assert ( l_clrKey )

                #** -------------------------------------------------------------------------------
                #*  aplica na superficie
                #*/
                l_srfImg.set_colorkey ( l_clrKey, RLEACCEL )

            #** -----------------------------------------------------------------------------------
            #*  coloca a superficie na lista de imagens
            #*/
            l_lstImgs.append ( l_srfImg )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a lista de imagens
        #*/
        l_Ret = l_lstImgs

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** --------------------------------------------------------------------------------------------
    #*/
    return ( l_Ret )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::normalizeXY
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def normalizeXY ( f_tPos ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::normalizeXY"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  normaliza o valor do ponto no range (0..1)
    #*/
    l_pto = (((( f_tPos [ 0 ] - w_fWXLo ) * w_fEscX ) + w_fVXLo ),
             ((( f_tPos [ 1 ] - w_fWYLo ) * w_fEscY ) + w_fVYLo ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_pto )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::scale2Device
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  f_srfArea - superficie
#*  @param  f_tPos    - coordenadas ( X, Y )
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def scale2Device ( f_tPos ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::scale2Device"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*  obtem a largura da area de scope
    #*/
    l_fW = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 0 ] - 1

    #** -------------------------------------------------------------------------------------------
    #*  obtem a altura da area de scope
    #*/
    l_fH = glbDefs.xSCR_POS [ glbDefs.xSCR_Scope ][ 1 ][ 1 ] - 1

    #** -------------------------------------------------------------------------------------------
    #*  escala a coluna
    #*/
    l_fX = f_tPos [ 0 ] * l_fW

    #** -------------------------------------------------------------------------------------------
    #*  escala a linha
    #*/
    l_fY = f_tPos [ 1 ] * l_fH

    #** -------------------------------------------------------------------------------------------
    #*  ajusta a linha ao sistema grafico
    #*/
    l_fY = l_fH - l_fY

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return (( int ( round ( l_fX )), int ( round ( l_fY ))))

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::setViewport
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def setViewport ( f_fXLo, f_fXHi, f_fYLo, f_fYHi ):

    #/ define global scope
    #/ --------------------------------------------------------------------------------------------
    global w_fVXLo, w_fVXHi, w_fVYLo, w_fVYHi, w_fEscX, w_fEscY

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::setViewport"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "na entrada: f_fXLo:[%f] f_fXHi:[%f]" % ( f_fXLo, f_fXHi ))
    #l_log.info ( "na entrada: f_fYLo:[%f] f_fYHi:[%f]" % ( f_fYLo, f_fYHi ))

    #** -------------------------------------------------------------------------------------------
    #*  configura as coodernadas X do viewport
    #*/
    w_fVXLo = f_fXLo
    w_fVXHi = f_fXHi

    #** -------------------------------------------------------------------------------------------
    #*  configura as coodernadas Y do viewport
    #*/
    w_fVYLo = f_fYLo
    w_fVYHi = f_fYHi

    #** -------------------------------------------------------------------------------------------
    #*  configura a escala = larg. viewport / larg. window
    #*/
    w_fEscX  = ( w_fVXHi - w_fVXLo ) / ( w_fWXHi - w_fWXLo )
    w_fEscY  = ( w_fVYHi - w_fVYLo ) / ( w_fWYHi - w_fWYLo )

    #l_log.info ( "na saida: w_fEscX:[%f] w_fEscY:[%f]" % ( w_fEscX, w_fEscY ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::setWindow
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def setWindow ( f_fXLo, f_fXHi, f_fYLo, f_fYHi ):

    #/ define global scope
    #/ --------------------------------------------------------------------------------------------
    global w_fWXLo, w_fWXHi, w_fWYLo, w_fWYHi, w_fEscX, w_fEscY

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::setWindow"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #l_log.info ( "na entrada: f_fXLo:[%f] f_fXHi:[%f]" % ( f_fXLo, f_fXHi ))
    #l_log.info ( "na entrada: f_fYLo:[%f] f_fYHi:[%f]" % ( f_fYLo, f_fYHi ))

    #** -------------------------------------------------------------------------------------------
    #*  configura as coodernadas X da window
    #*/
    w_fWXLo = f_fXLo
    w_fWXHi = f_fXHi

    #** -------------------------------------------------------------------------------------------
    #*  configura as coodernadas Y da window
    #*/
    w_fWYLo = f_fYLo
    w_fWYHi = f_fYHi

    #** -------------------------------------------------------------------------------------------
    #*  configura a escala = larg. viewport / larg. window
    #*/
    w_fEscX = ( w_fVXHi - w_fVXLo ) / ( w_fWXHi - w_fWXLo )
    w_fEscY = ( w_fVYHi - w_fVYLo ) / ( w_fWYHi - w_fWYLo )

    #l_log.info ( "na saida: w_fEscX:[%f] w_fEscY:[%f]" % ( w_fEscX, w_fEscY ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  viewUtils::unormalizeXY
#*  -----------------------------------------------------------------------------------------------
#*  converte coordenadas de tela para coordenadas definidas pelo usuario.
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def unormalizeXY ( f_tPos ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "viewUtils::unormalizeXY"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    l_pto = (((( f_tPos [ 0 ] - w_fVXLo ) / w_fEscX ) + w_fWXLo ),
             ((( f_tPos [ 1 ] - w_fVYLo ) / w_fEscY ) + w_fWYLo ))

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( l_pto )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "viewUtils" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
