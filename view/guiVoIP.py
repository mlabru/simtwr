#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: guiVoIP
#*
#*  Descricao: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca grafica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font

from pygame.locals import *

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiCAD / view
#/ ------------------------------------------------------------------------------------------------
import view.grUtils as grUtils
import view.viewUtils as viewUtils

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/


#** -----------------------------------------------------------------------------------------------
#*  guiVoIP::drawRect
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def drawRect ( Surface, Rect, lvl = 1, roundedness = 7 ):

    #/ nome do metodo (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "guiVoIP::drawRect"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( logging.INFO )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( 1 == lvl ):

        #** ---------------------------------------------------------------------------------------
        #*/
        color1 = (  28,  28,  28 )
        color2 = ( 128, 128, 128 )

    #** -------------------------------------------------------------------------------------------
    #*/
    elif ( 2 == lvl ):

        #** ---------------------------------------------------------------------------------------
        #*/
        color1 = (  48,  48,  48 )
        color2 = ( 128, 128, 128 )

    #** -------------------------------------------------------------------------------------------
    #*/
    if ( None != Rect ):

        #** ---------------------------------------------------------------------------------------
        #*/
        grUtils.RoundedRect ( Surface, color1, Rect, roundedness )
        grUtils.RoundedRect ( Surface, color2, Rect, roundedness, 1 )

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*  guiVoIP::guiVoIP
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
class guiVoIP:

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the voip area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_bg, f_cm, f_tNW, f_tWH ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_bg )
        assert ( f_cm )

        assert ( f_tNW )
        assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  posicao da area de informacoes
        #*/
        self._tNW = f_tNW

        #** ---------------------------------------------------------------------------------------
        #*  largura e altura da caixa
        #*/
        self._tWH = f_tWH

        #** ---------------------------------------------------------------------------------------
        #*  altura util da caixa
        #*/
        self._iWrkY = self._tNW [ 1 ] + locDefs.xSCR_HDR_Height

        #** ---------------------------------------------------------------------------------------
        #*  fonte monospaced
        #*/
        self._szFont = glbDefs.xFNT_MONO

        #** ---------------------------------------------------------------------------------------
        #*  fonte monospaced
        #*/
        self._voip = f_cm.getVoIP ()
        #assert ( self._voip )

        #** ---------------------------------------------------------------------------------------
        #*  centro da area
        #*/
        self._tVoIPCtr = ( int ( round ( f_tNW [ 0 ] + (  f_tWH [ 0 ] / 2 ))),
                           int ( round ( f_tNW [ 1 ] + (( f_tWH [ 1 ] + locDefs.xSCR_HDR_Height ) / 2 ))))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._imgSlider = viewUtils.loadImage ( "slider.png", True )
        assert ( self._imgSlider )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de VoIP
        #*/
        l_srfVoIP = pygame.Surface ( f_tWH )
        assert ( l_srfVoIP )

        l_srfVoIP.set_colorkey ( l_srfVoIP.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  cria o header
        #*/
        self.makeHeader ( l_srfVoIP )

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        f_bg.blit ( l_srfVoIP, f_tNW )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::cbkCheckVoIP
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def cbkCheckVoIP ( self, f_tMouse ):

        #// nome do metodo (logger)
        #// ---------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::cbkCheckVoIP"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_tMouse )

        #** ---------------------------------------------------------------------------------------
        #*  verifica coluna (x)
        #*/
        if (( f_tMouse [ 0 ] >= self._tNW [ 0 ] + 14 ) and
            ( f_tMouse [ 0 ] <= ( self._tNW [ 0 ] + self._tWH [ 0 ] - 20 ))):

            #** -----------------------------------------------------------------------------------
            #*  verifica linha (y)
            #*/
            if (( f_tMouse [ 1 ] >= self._iWrkY + 25 ) and
                ( f_tMouse [ 1 ] <= self._iWrkY + 40 )):

                #** -------------------------------------------------------------------------------
                #*  altera o volume de saida
                #*/
                glbDefs.xSND_Vol_Out = ( f_tMouse [ 0 ] - ( self._tNW [ 0 ] + 14 )) / 225.0
                #l_log.info ( "glbDefs.xSND_Vol_Out: " + str ( glbDefs.xSND_Vol_Out ))

                #** -------------------------------------------------------------------------------
                #*  altera o volume de saida
                #*/
                #self._voip.soundPlayVol ( int ( glbDefs.xSND_Vol_Out * 100 ) % 101 )
                #l_log.info ( "soundPlayVol: " + str ( glbDefs.xSND_Vol_Out * 100 ))

            #** -----------------------------------------------------------------------------------
            #*  verifica linha (y)
            #*/
            if (( f_tMouse [ 1 ] >= self._iWrkY + 65 ) and
                ( f_tMouse [ 1 ] <= self._iWrkY + 80 )):

                #** -------------------------------------------------------------------------------
                #*  altera o volume do microfone
                #*/
                glbDefs.xSND_Vol_Mic = ( f_tMouse [ 0 ] - ( self._tNW [ 0 ] + 14 )) / 225.0
                #l_log.info ( "glbDefs.xSND_Vol_Mic: " + str ( glbDefs.xSND_Vol_Mic ))

                #** -------------------------------------------------------------------------------
                #*  altera o volume do microfone
                #*/
                #self._voip.soundRecGain ( int ( glbDefs.xSND_Vol_Mic * 100 ) % 101 )
                #l_log.info ( "soundRecGain: " + str ( glbDefs.xSND_Vol_Mic * 100 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::doDraw
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the info area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doDraw ( self, f_screen ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::doDraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_screen )

        #** ---------------------------------------------------------------------------------------
        #*  desenha a area de controles VoIP
        #*/
        drawRect ( f_screen, ( self._tNW [ 0 ], self._iWrkY,
                               self._tWH [ 0 ], self._tWH [ 1 ] - locDefs.xSCR_HDR_Height ), 2 )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posicao do texto (volume do alto-falante)
        #*/
        l_txtPos = ( self._tNW [ 0 ] + 10, self._iWrkY + 5 )
        assert ( l_txtPos ) 

        #** ---------------------------------------------------------------------------------------
        #*  escreve "volume do alto-falante"
        #*/
        self.drawText ( f_screen, 12, "volume de saida", locDefs.xCOR_Vers, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  desenha o controle 
        #*/
        drawRect ( f_screen, ( self._tNW [ 0 ] + 10, self._iWrkY + 25,
                               self._tWH [ 0 ] - 20, 15 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha a escala
        #*/
        for l_Step in xrange ( 2, 225, 5 ):

            #** -----------------------------------------------------------------------------------
            #*  desenha um step da escala
            #*/
            l_posEsc = self._tNW [ 0 ] + 16 + l_Step

            #** -----------------------------------------------------------------------------------
            #*  desenha um step da escala
            #*/
            pygame.draw.line ( f_screen, ( 104, 104, 104 ),
                               ( l_posEsc, self._iWrkY + 26 ),
                               ( l_posEsc, self._iWrkY + 38 ))

            #** -----------------------------------------------------------------------------------
            #*  posiciona o slider
            #*/
            f_screen.blit ( self._imgSlider, ( self._tNW [ 0 ] + 14 + ( 225.0 * glbDefs.xSND_Vol_Out ),
                                               self._iWrkY + 26 ))

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posicao do texto (volume do microfone)
        #*/
        l_txtPos = ( self._tNW [ 0 ] + 10,
                     self._iWrkY + 45 )
        assert ( l_txtPos ) 

        #** ---------------------------------------------------------------------------------------
        #*  escreve "volume do microfone"
        #*/
        self.drawText ( f_screen, 12, "volume do microfone", locDefs.xCOR_Vers, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  desenha o controle 
        #*/
        drawRect ( f_screen, ( self._tNW [ 0 ] + 10, self._iWrkY + 65,
                               self._tWH [ 0 ] - 20, 15 ))

        #** ---------------------------------------------------------------------------------------
        #*  desenha a escala
        #*/
        for l_Step in xrange ( 2, 225, 5 ):

            #** -----------------------------------------------------------------------------------
            #*  desenha um step da escala
            #*/
            l_posEsc = self._tNW [ 0 ] + 16 + l_Step

            #** -----------------------------------------------------------------------------------
            #*  desenha um step da escala
            #*/
            pygame.draw.line ( f_screen, ( 104, 104, 104 ),
                               ( l_posEsc, self._iWrkY + 66 ),
                               ( l_posEsc, self._iWrkY + 78 ))

            #** -----------------------------------------------------------------------------------
            #*  posiciona o slider
            #*/
            f_screen.blit ( self._imgSlider, ( self._tNW [ 0 ] + 14 + ( 225.0 * glbDefs.xSND_Vol_Mic ),
                                               self._iWrkY + 66 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::doRedraw
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the info area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedraw ( self, f_bg ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::doRedraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_bg )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de informacoes
        #*/
        l_srfVoIP = pygame.Surface ( self._tWH )
        assert ( l_srfVoIP )

        l_srfVoIP.set_colorkey ( l_srfVoIP.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        self.makeHeader ( l_srfVoIP )

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        f_bg.blit ( l_srfVoIP, self._tNW )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::drawText
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the info area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawText ( self, f_screen, f_iSize, f_szTxt, f_tCor, f_tPos ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::drawText"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_screen )
        assert ( f_szTxt )
        assert ( f_tCor )
        assert ( f_tPos )

        #** ---------------------------------------------------------------------------------------
        #*  verifica condicoes de execucao
        #*/
        assert ( self._szFont )

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte
        #*/
        l_font = pygame.font.Font ( self._szFont, f_iSize )
        assert ( l_font )

        #** ---------------------------------------------------------------------------------------
        #*  cria o texto
        #*/
        l_szTxt = l_font.render ( f_szTxt, 1, f_tCor )
        assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posicao do texto
        #*/
        l_txtPos = l_szTxt.get_rect ()
        assert ( l_txtPos )

        l_txtPos.topleft = f_tPos

        #** ---------------------------------------------------------------------------------------
        #*  transfere o texto para a tela
        #*/
        f_screen.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiVoIP::makeHeader
    #*  -------------------------------------------------------------------------------------------
    #*  create a strip icon
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeHeader ( self, f_screen ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiVoIP::makeHeader"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_screen )

        #** ---------------------------------------------------------------------------------------
        #*  retangulo que define a area de strips
        #*/
        #l_retArea = ( 0, 0 ), self._tWH

        #** ---------------------------------------------------------------------------------------
        #*  desenha a moldura externa da area de strips
        #*/
        #pygame.draw.rect ( f_screen, locDefs.xCOR_Header, l_retArea, 1 )

        #** ---------------------------------------------------------------------------------------
        #*  cria o header da lista de strips
        #*/
        l_srfHdr = pygame.Surface (( self._tWH [ 0 ], locDefs.xSCR_HDR_Height ))
        assert ( l_srfHdr )

        #** ---------------------------------------------------------------------------------------
        #*  preeche com a cor de fundo
        #*/
        l_srfHdr.fill ( locDefs.xCOR_Header )
        #l_srfHdr.set_colorkey ( l_srfHdr.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte (monospaced, 10 pixels)
        #*/
        l_font = pygame.font.Font ( glbDefs.xFNT_MONO, locDefs.xSCR_HDR_FntSiz )
        assert ( l_font )

        #** ---------------------------------------------------------------------------------------
        #*  cria o texto
        #*/
        l_szTxt = l_font.render ( "comunicacao VoIP", 1, glbDefs.xCOR_SGrey )
        assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posicao do texto
        #*/
        l_txtPos = l_szTxt.get_rect ()
        assert ( l_txtPos )

        l_txtPos.center = ( self._tWH [ 0 ] / 2, ( locDefs.xSCR_HDR_Height / 2 ) - 1 )

        #** ---------------------------------------------------------------------------------------
        #*  transfere o texto para o header
        #*/
        l_srfHdr.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  transfere o header para a tela
        #*/
        f_screen.blit ( l_srfHdr, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a area de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiVoIP" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( logging.DEBUG )

#** ----------------------------------------------------------------------------------------------- *#
