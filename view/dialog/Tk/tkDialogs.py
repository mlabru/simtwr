#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: pyACME
#*  Classe...: tkDialogs
#*
#*  Descrição: da inicio ao sistema, inicializar todas as variaveis globais utilizadas no sistema
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2008/jun/20  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/jun/20  version started
#*  1.0-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ Tkinter (gui library)
#/ ------------------------------------------------------------------------------------------------
import Tkinter

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level  
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  tkDialogs::tkDialogs
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class tkDialogs:

    #/ mensagem de erro
    #/ --------------------------------------------------------------------------------------------
    w_szMsgError = "Erro !"

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_szTitle ):

        #/ nome do método (logger)
        #/ -----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::__init__"


        #** ----------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ----------------------------------------------------------------------------------------
        #*  flag Ok
        #*/
        self._bOk = False

        #** ---------------------------------------------------------------------------------------
        #*  inicia resposta
        #*/
        self._result = None

        #** ---------------------------------------------------------------------------------------
        #*  área de entrada de dados
        #*/
        self._entry = None

        #** ---------------------------------------------------------------------------------------
        #*  load Tkinter
        #*/
        self._tkRoot = Tkinter.Tk ()
        #assert ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se forneceu um título para a dialog
        #*/
        if ( f_szTitle ):

            #** -----------------------------------------------------------------------------------
            #*  configura o título da dialog
            #*/
            self._tkRoot.title ( f_szTitle )

        #** ---------------------------------------------------------------------------------------
        #*  cria a dialog
        #*/
        l_dlg = Tkinter.Frame ( self._tkRoot )
        #assert ( l_dlg )

        #** ---------------------------------------------------------------------------------------
        #*  cria o conteúdo e seta o foco
        #*/
        self._tkRoot.initial_focus = self.makeBody ( l_dlg )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_dlg.pack ( padx = 1, pady = 1 )

        #** ---------------------------------------------------------------------------------------
        #*  cria a área de botões da dialog
        #*/
        self.makeButtonBox ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  make sure that no mouse/keyboard events are sent to wrong window
        #*/
        self._tkRoot.grab_set ()

        #** ---------------------------------------------------------------------------------------
        #*  get focus ?
        #*/
        if ( not self._tkRoot.initial_focus ):

            #** -----------------------------------------------------------------------------------
            #*/
            self._tkRoot.initial_focus = self._tkRoot

        #** ---------------------------------------------------------------------------------------
        #*  resize dialog
        #*/
        self._tkRoot.geometry ( "%+d%+d" % ( 600, 400 ))

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tkRoot.update ()

        #** ---------------------------------------------------------------------------------------
        #*  move the keyboard focus to dialog
        #*/
        self._tkRoot.initial_focus.focus_set ()

        #** ---------------------------------------------------------------------------------------
        #*  center in screen
        #*/
        #tkUtils.center_toplevel_in_screen ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  handle user explicitly close the window
        #*/
        self._tkRoot.protocol ( "WM_DELETE_WINDOW", self.doCancel )

        #** ---------------------------------------------------------------------------------------
        #*  set flag always on top
        #*/
        #self._tkRoot.wait_visibility ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  set flag always on top
        #*/
        self._tkRoot.wm_attributes ( "-topmost", 1 )

        #** ---------------------------------------------------------------------------------------
        #*  processa o diálogo
        #*/
        self._tkRoot.wait_window ( self._tkRoot )

        #** ----------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::doApply
    #*  -------------------------------------------------------------------------------------------
    #*  override
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  this method should be overridden
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doApply ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::doApply"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        pass

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::doCancel
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doCancel ( self, f_event = None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::doCancel"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  put focus back to the parent window
        #*/
        #self.parent.focus_set ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tkRoot.destroy ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::doOk
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doOk ( self, f_event = None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::doOk"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        if ( not self.doValidate ()):

            #** -----------------------------------------------------------------------------------
            #*  put focus back
            #*/
            self._tkRoot.initial_focus.focus_set ()

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return

        #** ----------------------------------------------------------------------------------------
        #*  flag Ok
        #*/
        self._bOk = True

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tkRoot.withdraw ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self._tkRoot.update_idletasks ()

        #** ---------------------------------------------------------------------------------------
        #*/
        self.doApply ()

        #** ---------------------------------------------------------------------------------------
        #*  fecha a dialog
        #*/
        self.doCancel ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::doValidate
    #*  -------------------------------------------------------------------------------------------
    #*  command hooks
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  this method should be overridden
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doValidate ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::doValidate"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::getResult
    #*  -------------------------------------------------------------------------------------------
    #*  override
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  this method should be overridden
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getResult ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::getResult"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        pass

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::makeBody
    #*  -------------------------------------------------------------------------------------------
    #*  create dialog body
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return widget that should have initial focus
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  this method should be overridden
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeBody ( self, f_master ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::makeBody"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( None )

    #** -------------------------------------------------------------------------------------------
    #*  tkDialogs::makeButtonBox
    #*  -------------------------------------------------------------------------------------------
    #*  add standard button box
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  override if you don't want the standard buttons
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeButtonBox ( self, f_master ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::makeButtonBox"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        #assert ( f_master )
        
        #** ---------------------------------------------------------------------------------------
        #*  add standard button box
        #*/
        l_frmBtn = Tkinter.Frame ( f_master )
        #assert ( l_frmBtn )

        #** ---------------------------------------------------------------------------------------
        #*  button (Ok)
        #*/
        l_btn = Tkinter.Button ( l_frmBtn, width = 5, text = "Ok", command = self.doOk, state = Tkinter.ACTIVE )
        #assert ( l_btn )
        
        l_btn.pack ( side = Tkinter.LEFT, padx = 1, pady = 1 )

        #** ---------------------------------------------------------------------------------------
        #*  button (Cancel)
        #*/
        l_btn = Tkinter.Button ( l_frmBtn, width = 5, text = "Cancela", command = self.doCancel )
        #assert ( l_btn )
        
        l_btn.pack ( side = Tkinter.RIGHT, padx = 1, pady = 1 )

        #** ---------------------------------------------------------------------------------------
        #*  faz o bind das teclas
        #*/
        f_master.bind ( "<Return>", self.doOk )
        f_master.bind ( "<Escape>", self.doCancel )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_frmBtn.pack ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** ===============================================================================================
#*  convenience dialogues
#*  ===============================================================================================
#*/

#** -----------------------------------------------------------------------------------------------
#*  _QueryDialog::_QueryDialog
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class _QueryDialog ( tkDialogs ):

    #** -------------------------------------------------------------------------------------------
    #*  _QueryDialog::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_title, f_prompt, valIni = None,
                                            valMin = None,
                                            valMax = None ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        self._szPrompt = f_prompt
        self._valMin = valMin
        self._valMax = valMax

        #** ---------------------------------------------------------------------------------------
        #*/
        self._valIni = valIni

        #** ---------------------------------------------------------------------------------------
        #*/
        tkDialogs.__init__ ( self, f_title )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  _QueryDialog::makeBody
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeBody ( self, f_master ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::makeBody"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cria o prompt
        #*/
        l_w = Tkinter.Label ( f_master, text = self._szPrompt, justify = Tkinter.LEFT )
        #assert ( l_w ) 

        l_w.grid ( row = 0, column = 0, padx = 1, sticky = Tkinter.W )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de entrada de dados
        #*/
        self._entry = Tkinter.Entry ( f_master, width = 5, name = "entry" )
        #assert ( self._entry )
        
        self._entry.grid ( row = 0, column = 1, padx = 1, sticky = Tkinter.E )

        #** ---------------------------------------------------------------------------------------
        #*  configurou um valor inicial ?
        #*/
        if ( self._valIni ):

            #** -----------------------------------------------------------------------------------
            #*  insere o valor inicial no campo de entrada de dados 
            #*/
            self._entry.insert ( 0, self._valIni )

            #** -----------------------------------------------------------------------------------
            #*  seleciona o campo de entrada de dados
            #*/
            self._entry.select_range ( 0, Tkinter.END )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o campo de entrada de dados
        #*/
        return ( self._entry )

    #** -------------------------------------------------------------------------------------------
    #*  _QueryDialog::doValidate
    #*  -------------------------------------------------------------------------------------------
    #*  valida o campo de entrada de dados
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doValidate ( self ):

        #/ Tkinter
        #/ ----------------------------------------------------------------------------------------
        import tkMessageBox

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "tkDialogs::doValidate"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  testa...
        #*/
        try:

            #** -----------------------------------------------------------------------------------
            #*  obtem o conteudo do campo de entrada de dados
            #*/
            l_result = self.getResult ()

        #** ---------------------------------------------------------------------------------------
        #*  checa por erros...
        #*/
        except ValueError:

            #** -----------------------------------------------------------------------------------
            #*  envia uma mensagem de valor ilegal
            #*/
            tkMessageBox.showwarning ( "Valor ilegal",
                                       self.w_szMsgError + "\nTente novamente",
                                       parent = self._tkRoot
                                     )

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return ( False )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se tem valor mínimo e o valor esta acima deste
        #*/
        if (( self._valMin is not None ) and ( l_result < self._valMin )):

            #** -----------------------------------------------------------------------------------
            #*  envia uma mensagem de valor abaixo do minimo
            #*/
            tkMessageBox.showwarning (  "Muito pequeno !",
                                       u"O valor mínimo permitido é %s. "
                                        "Tente novamente." % self._valMin,
                                       parent = self._tkRoot
                                     )

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return ( False )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se tem valor máximo e o valor esta abaixo deste
        #*/
        if (( self._valMax is not None ) and ( l_result > self._valMax )):

            #** -----------------------------------------------------------------------------------
            #*/
            tkMessageBox.showwarning (  "Muito grande !",
                                       u"O valor máximo permitido é %s. "
                                        "Tente novamente." % self._valMax,
                                       parent = self._tkRoot
                                     )

            #** -----------------------------------------------------------------------------------
            #*  m.poirot logger
            #*/
            #l_log.debug ( "<< " )

            #** -----------------------------------------------------------------------------------
            #*  cai fora...
            #*/
            return ( False )
                
        #** ---------------------------------------------------------------------------------------
        #*  salva o conteúdo do campo
        #*/
        self._result = l_result

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return ( True )

#** -----------------------------------------------------------------------------------------------
#*  _QueryInteger::_QueryInteger
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class _QueryInteger ( _QueryDialog ):

    #/ mensagem de erro
    #/ --------------------------------------------------------------------------------------------
    w_szMsgError = "Nao eh um valor inteiro."

    #** -------------------------------------------------------------------------------------------
    #*  _QueryInteger::getResult
    #*  -------------------------------------------------------------------------------------------
    #*  obtem o campo de entrada de dados convertido para inteiro
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return o campo de entrada de dados convertido para inteiro
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getResult ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "_QueryInteger::getResult"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o campo de entrada de dados convertido para inteiro
        #*/
        return ( int ( self._entry.get ()))

#** -----------------------------------------------------------------------------------------------
#*  _QueryFloat::_QueryFloat
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class _QueryFloat ( _QueryDialog ):

    #/ mensagem de erro
    #/ --------------------------------------------------------------------------------------------
    w_szMsgError = "Nao e um valor real."

    #** -------------------------------------------------------------------------------------------
    #*  _QueryFloat::getResult
    #*  -------------------------------------------------------------------------------------------
    #*  obtem o campo de entrada de dados convertido para real
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return o campo de entrada de dados convertido para real
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getResult ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "_QueryFloat::getResult"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o campo de entrada de dados convertido para float
        #*/
        return ( float ( self._entry.get ()))

#** -----------------------------------------------------------------------------------------------
#*  _QueryString::_QueryString
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class _QueryString ( _QueryDialog ):

    #** -------------------------------------------------------------------------------------------
    #*  _QueryString::getResult
    #*  -------------------------------------------------------------------------------------------
    #*  obtem o campo de entrada de dados convertido para string
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return o campo de entrada de dados convertido para string
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getResult ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "_QueryString::getResult"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o campo de entrada de dados convertido para string
        #*/
        return ( self._entry.get ())

#** ===============================================================================================
#*  
#*  ===============================================================================================
#*/

#** -----------------------------------------------------------------------------------------------
#*  tkDialogs::askfloat
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def askfloat ( f_title, f_prompt, **kw ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "tkDialogs::askfloat"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    d = apply ( _QueryFloat, ( f_title, f_prompt ), kw )
    #assert ( d ) 

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( d._result )

#** -----------------------------------------------------------------------------------------------
#*  tkDialogs::askinteger
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def askinteger ( f_title, f_prompt, **kw ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "tkDialogs::askinteger"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    d = apply ( _QueryInteger, ( f_title, f_prompt ), kw )
    #assert ( d ) 

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( d._result )

#** -----------------------------------------------------------------------------------------------
#*  tkDialogs::askstring
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
def askstring ( f_title, f_prompt, **kw ):

    #/ nome do método (logger)
    #/ --------------------------------------------------------------------------------------------
    #l_szMetodo = "tkDialogs::askstring"


    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log = logging.getLogger ( l_szMetodo )
    #l_log.setLevel ( w_logLvl )
    #l_log.debug ( ">> " )

    #** -------------------------------------------------------------------------------------------
    #*/
    d = apply ( _QueryString, ( f_title, f_prompt ), kw )
    #assert ( d ) 

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*/
    return ( d._result )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "tkDialogs" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*/
    d = tkDialogs ( "Teste..." )
    #assert ( d )

    #** -------------------------------------------------------------------------------------------
    #*/
    print askinteger ( "Spam", "Egg count", valIni = 12 * 12 )
    print askfloat ( "Spam", "Egg weight\n(in tons)", valMin = 1, valMax = 100 )
    print askstring ( "Spam", "Confirma percurso ?" )

#** ----------------------------------------------------------------------------------------------- *#
