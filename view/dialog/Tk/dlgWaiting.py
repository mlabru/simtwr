#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2009, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: dlgWaiting
#*
#*  Descrição: DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração       
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/???/??  version started
#*  mlabru   2008/nov/20  version started
#*  mlabru   2010/set/13  coding utf-8, unicode
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/nov/20  version started
#*  1.2-0.1  2008/nov/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
#** -----------------------------------------------------------------------------------------------
#*  
#*  -----------------------------------------------------------------------------------------------
#*/
if ( '__main__' == __name__ ):

    #/ Python Library
    #/ --------------------------------------------------------------------------------------------
    import sys

    sys.path.insert ( 0, ".." )

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ Tkinter (gui library)
#/ ------------------------------------------------------------------------------------------------
import Tkinter

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.locDefs as locDefs

#/ SiCAD / view
#/ ------------------------------------------------------------------------------------------------
import view.dialog.Tk.tkUtils as tkUtils

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  dlgWaiting::dlgWaiting
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
class dlgWaiting:

    #** -------------------------------------------------------------------------------------------
    #*  dlgWaiting::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szMsg - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_szMsg ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "dlgWaiting::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        #assert ( f_szMsg )

        #** ---------------------------------------------------------------------------------------
        #*  load Tkinter
        #*/
        self._tkRoot = Tkinter.Tk ()
        #assert ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  set window title
        #*/
        self._tkRoot.title ( locDefs.xTXT_Tit )

        #** ---------------------------------------------------------------------------------------
        #*  widgets initialization
        #*/
        l_frmM = Tkinter.Frame ( self._tkRoot )
        #assert ( l_frmM )

        #** ---------------------------------------------------------------------------------------
        #*  pack frame
        #*/
        l_frmM.pack ()

        #** ---------------------------------------------------------------------------------------
        #*  labels
        #*/
        l_lbl1 = Tkinter.Label ( l_frmM, font = "{MS Sans Serif} 14", text = f_szMsg )
        l_lbl1.grid ( column = 1, row = 1 )

        #** ---------------------------------------------------------------------------------------
        #*  resize behavior (l_frmM)
        #*/
        l_frmM.grid_rowconfigure (    1, weight = 0, minsize = 40, pad = 0 )
        l_frmM.grid_columnconfigure ( 1, weight = 0, minsize = 40, pad = 0 )

        #** ---------------------------------------------------------------------------------------
        #*  atualiza a janela
        #*/
        self._tkRoot.update ()

        #** ---------------------------------------------------------------------------------------
        #*  centraliza a janela
        #*/
        tkUtils.center_toplevel_in_screen ( self._tkRoot )

        #** ---------------------------------------------------------------------------------------
        #*  desabilita decorations
        #*/
        #self._tkRoot.overrideredirect ( 1 )

        #** ---------------------------------------------------------------------------------------
        #*  desabilita resize
        #*/
        self._tkRoot.resizable ( 0, 0 )

        #** ---------------------------------------------------------------------------------------
        #*  atualiza a janela
        #*/
        self._tkRoot.update ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  dlgWaiting::closePanel
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  nenhum
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def closePanel ( self ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "dlgWaiting::closePanel"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  unload Tkinter
        #*/
        self._tkRoot.destroy ()

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "dlgWaiting" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** -----------------------------------------------------------------------------------------------
#*  this is the bootstrap process
#*/
if ( '__main__' == __name__ ):

    import time
    #** -------------------------------------------------------------------------------------------
    #*  m.poirot logger
    #*/
    logging.basicConfig ()

    #** -------------------------------------------------------------------------------------------
    #*/
    d = dlgWaiting ( "Janela teste de espera..." )
    #assert ( d )

    #** -------------------------------------------------------------------------------------------
    #*/
    time.sleep ( 2 )

    #** -------------------------------------------------------------------------------------------
    #*/
    d.closePanel ()

#** ----------------------------------------------------------------------------------------------- *#
