#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: guiMessage
#*
#*  Descricao: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca grafica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font

from pygame.locals import *

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#** -----------------------------------------------------------------------------------------------
#*  variaveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  guiMessage::guiMessage
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*  @param  DOCUMENT ME!
#*
#*  @return nenhum
#*  -----------------------------------------------------------------------------------------------
#*/
class guiMessage:

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the scope area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_bg, f_tNW, f_tWH ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_bg )

        assert ( f_tNW )
        assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  altura do header
        #*/
        self._iHeaderHeight = locDefs.xSCR_HDR_Height

        #** ---------------------------------------------------------------------------------------
        #*  tamanho da fonte
        #*/
        self._iFontSize = 12

        #** ---------------------------------------------------------------------------------------
        #*  numero de linhas na caixa de mensagens
        #*/
        self._iMax = int ( round (( f_tWH [ 1 ] - self._iHeaderHeight ) / self._iFontSize ))
        #l_log.info ( "self._iMax: " + str ( self._iMax ))

        #** ---------------------------------------------------------------------------------------
        #*  lista de tuplas de ( mensagens, cor )
        #*/
        self._lstMsg = []

        #** ---------------------------------------------------------------------------------------
        #*  posicao da caixa de mensagens
        #*/
        self._tNW = f_tNW

        #** ---------------------------------------------------------------------------------------
        #*  largura e altura da caixa
        #*/
        self._tWH = f_tWH

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de mensagens de erro e de alerta
        #*/
        l_msgBox = pygame.Surface ( self._tWH )
        assert ( l_msgBox ) 

        l_msgBox.fill (( 0, 0x50, 0x60 ))
        #l_msgBox.set_colorkey ( l_msgBox.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        self.makeHeader ( l_msgBox )

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        f_bg.blit ( l_msgBox, self._tNW )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::addMsg
    #*  -------------------------------------------------------------------------------------------
    #*  add's a message to the bottom of the screen
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szHdr - the message header to be displayed
    #*  @param  f_szMsg - the message to be displayed
    #*  @param  f_tCor  - the message color
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def addMsg ( self, f_szHdr, f_szMsg, f_tCor ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::addMsg"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_szHdr )
        assert ( f_szMsg )
        assert ( f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  monta o texto
        #*/
        l_szTxt = f_szHdr + ": " + f_szMsg
        assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  insere o texto na lista
        #*/
        self.addTxt ( l_szTxt, f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::addTxt
    #*  -------------------------------------------------------------------------------------------
    #*  add's a message to the bottom of the screen
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szTxt - the message to be displayed
    #*  @param  f_tCor  - the message color
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def addTxt ( self, f_szTxt, f_tCor ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::addTxt"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_szTxt )
        assert ( f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  checa se a lista cabe na caixa de mensagens
        #*/
        if ( len ( self._lstMsg ) > ( self._iMax - 1 )):

            #** -----------------------------------------------------------------------------------
            #*  se nao couber, remove uma mensagem
            #*/
            self._lstMsg.pop ( 0 )

        #** ---------------------------------------------------------------------------------------
        #*  seleciona a fonte a utilizar
        #*/
        l_Font = pygame.font.Font ( glbDefs.xFNT_None, self._iFontSize )
        assert ( l_Font )

        #** ---------------------------------------------------------------------------------------
        #*  escreve o texto na fonte e cor selecionadas
        #*/
        l_szTxt = l_Font.render ( f_szTxt, 1, f_tCor )
        assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  insere o texto na lista
        #*/
        self._lstMsg.append ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::doRedraw
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the scope area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedraw ( self, f_bg ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::doRedraw"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_bg )

        #** ---------------------------------------------------------------------------------------
        #*  cria a area de mensagens de erro e de alerta
        #*/
        l_msgBox = pygame.Surface ( self._tWH )
        assert ( l_msgBox ) 

        l_msgBox.fill (( 0, 0x50, 0x60 ))
        #l_msgBox.set_colorkey ( l_msgBox.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        self.makeHeader ( l_msgBox )

        #** ---------------------------------------------------------------------------------------
        #*  copia no background
        #*/
        f_bg.blit ( l_msgBox, self._tNW )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiMessage::doRedrawMsgs
    #*  -------------------------------------------------------------------------------------------
    #*  doRedraw all the messages in the msgBox
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_szMsg - the message to be displayed
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doRedrawMsgs ( self, f_Screen ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiMessage::doRedrawMsgs"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_Screen )

        #** ---------------------------------------------------------------------------------------
        #*  checa se "existe" uma lista
        #*/
        if ( self._lstMsg ):

            #** -----------------------------------------------------------------------------------
            #*  obtem o numero de mensagens na lista
            #*/
            l_iLenList = len ( self._lstMsg )

            #** -----------------------------------------------------------------------------------
            #*  range da lista
            #*/
            l_Iterator = range ( l_iLenList )

            #** -----------------------------------------------------------------------------------
            #*  inverte a ordem
            #*/
            l_Iterator.reverse ()

            #** -----------------------------------------------------------------------------------
            #*  para todas as mensagens na lista...
            #*/
            for l_iI in l_Iterator:

                #** -------------------------------------------------------------------------------
                #*  calcula a posicao do texto
                #*/
                l_iTxtPos = ( self._tNW [ 0 ] + 5,
                              self._tNW [ 1 ] + self._iHeaderHeight +
                                            2 + (( l_iLenList - 1 ) - l_iI ) * self._iFontSize )

                #** -------------------------------------------------------------------------------
                #*  escreve o texto na tela
                #*/
                f_Screen.blit ( self._lstMsg [ l_iI ], l_iTxtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::makeHeader
    #*  -------------------------------------------------------------------------------------------
    #*  create a strip icon
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeHeader ( self, f_screen ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::makeHeader"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( logging.INFO )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_screen )

        #** ---------------------------------------------------------------------------------------
        #*  retangulo que define a area de strips
        #*/
        l_retArea = ( 0, 0 ), self._tWH

        #** ---------------------------------------------------------------------------------------
        #*  desenha a moldura externa da area de strips
        #*/
        pygame.draw.rect ( f_screen, locDefs.xCOR_Header, l_retArea, 1 )

        #** ---------------------------------------------------------------------------------------
        #*  cria o header da lista de strips
        #*/
        l_srfHdr = pygame.Surface (( self._tWH [ 0 ], self._iHeaderHeight ))
        assert ( l_srfHdr )

        #** ---------------------------------------------------------------------------------------
        #*  preeche com a cor de fundo
        #*/
        l_srfHdr.fill ( locDefs.xCOR_Header )
        #l_srfHdr.set_colorkey ( l_srfHdr.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte (monospaced, 10 pixels)
        #*/
        l_font = pygame.font.Font ( glbDefs.xFNT_MONO, locDefs.xSCR_HDR_FntSiz )
        assert ( l_font )

        #** ---------------------------------------------------------------------------------------
        #*  cria o texto
        #*/
        l_szTxt = l_font.render ( "mensagens, alertas e erros", 1, glbDefs.xCOR_SGrey )
        assert ( l_szTxt )

        #** ---------------------------------------------------------------------------------------
        #*  calcula a posicao do texto
        #*/
        l_txtPos = l_szTxt.get_rect ()
        assert ( l_txtPos )

        l_txtPos.center = ( self._tWH [ 0 ] / 2, ( self._iHeaderHeight / 2 ) - 1 )

        #** ---------------------------------------------------------------------------------------
        #*  transfere o texto para o header
        #*/
        l_srfHdr.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  transfere o header para a tela
        #*/
        f_screen.blit ( l_srfHdr, ( 0, 0 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a area de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiMessage" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( logging.DEBUG )

#** ----------------------------------------------------------------------------------------------- *#
