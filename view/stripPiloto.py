#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: SiCAD
#*  Classe...: stripPiloto
#*
#*  Descricao: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteracao
#*  -----------------------------------------------------------------------------------------------
#*  correa   1997/fev/12  version started
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versao
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame
import pygame.font
import pygame.image

from pygame.locals import *

#/ SiCAD / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ SiCAD / view
#/ ------------------------------------------------------------------------------------------------
import view.guiStrip as guiStrip

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  stripPiloto::stripPiloto
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class stripPiloto ( guiStrip.guiStrip ):

    #** -------------------------------------------------------------------------------------------
    #*  stripPiloto::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the scope area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_bg, f_tNW, f_tWH ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "stripPiloto::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_cm )
        assert ( f_bg )

        assert ( f_tNW )
        assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  inicia a superclass
        #*/
        guiStrip.guiStrip.__init__ ( self, f_cm, f_bg, f_tNW, f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  stripPiloto::drawStripText
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*  @notes  Status,  Ident, Tipo,
    #*          Proa, Velocidade, Nivel,
    #*          ProaDem, VelDem,  NivDem,
    #*          Azimite, Distancia, QDM
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawStripText ( self, f_screen, f_tStripPos, f_oAtv ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "stripPiloto::drawStripText"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parametros de entrada
        #*/
        assert ( f_screen )
        assert ( f_tStripPos )
        assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  the positions of the center of the text fields
        #*/
        l_lstPos = (( 196, 28 ), (  31,  9 ), (  31, 28 ),    #! Status,  Ident, Tipo,
                    (  79,  9 ), ( 111,  9 ), ( 143,  9 ),    #! Proa, Velocidade, Nivel,
                    (  79, 28 ), ( 111, 28 ), ( 143, 28 ),    #! ProaDem, VelDem,  NivDem,
                    ( 176,  9 ), ( 208,  9 ), ( 240,  9 ))    #! Azimite, Distancia, QDM

        #** ---------------------------------------------------------------------------------------
        #*  the colors of the fields
        #*/
        l_lstCor = ( glbDefs.xCOR_black,     glbDefs.xCOR_black,     glbDefs.xCOR_black,
                     glbDefs.xCOR_darkgreen, glbDefs.xCOR_darkgreen, glbDefs.xCOR_darkgreen,
                     glbDefs.xCOR_darkred,   glbDefs.xCOR_darkred,   glbDefs.xCOR_darkred,
                     glbDefs.xCOR_black,     glbDefs.xCOR_black,     glbDefs.xCOR_black )

        #** ---------------------------------------------------------------------------------------
        #*  what to put in front of the points
        #*/
        l_lstTitle = ( 'stat: ', '', '', '', '', '', '', '', '', '', '', '' )

        #** ---------------------------------------------------------------------------------------
        #*  get the data
        #*/
        l_lstData = f_oAtv.getStripData ()
        assert ( l_lstData )

        #** ---------------------------------------------------------------------------------------
        #*  format the data
        #*/
        l_lstData = self.formatData ( l_lstData )
        assert ( l_lstData )

        #** ---------------------------------------------------------------------------------------
        #*  percorre a lista de dados a exibir na strip...
        #*/
        for l_iI in xrange ( len ( l_lstData )):

            #** -----------------------------------------------------------------------------------
            #*  monta o texto
            #*/
            l_szTxt = l_lstTitle [ l_iI ] + l_lstData [ l_iI ]
            assert ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  cria o texto
            #*/
            l_szTxt = self._font.render ( l_szTxt, 1, l_lstCor [ l_iI ] )
            assert ( l_szTxt )

            #** -----------------------------------------------------------------------------------
            #*  calcula a posicao do texto
            #*/
            l_txtPos = l_szTxt.get_rect ()
            assert ( l_txtPos )

            l_txtPos.center = ( l_lstPos [ l_iI ][ 0 ] + f_tStripPos [ 0 ],
                                l_lstPos [ l_iI ][ 1 ] + f_tStripPos [ 1 ] )

            #** -----------------------------------------------------------------------------------
            #*  transfere o texto para a tela
            #*/
            f_screen.blit ( l_szTxt, l_txtPos )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  stripPiloto::formatData
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def formatData ( self, l_lstData ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "stripPiloto::formatData"

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*/
        l_szStat   = str ( l_lstData [ 0 ] )
        l_szIdent  = str ( l_lstData [ 1 ] )
        l_szTipo   = str ( l_lstData [ 2 ] )

        l_dAlt     = float ( l_lstData [  3 ] )
        l_dProa    = float ( l_lstData [  4 ] )
        l_dVel     = float ( l_lstData [  5 ] )

        l_dAltDem  = float ( l_lstData [  6 ] )
        l_dProaDem = float ( l_lstData [  7 ] )
        l_dVelDem  = float ( l_lstData [  8 ] )

        l_dAzm     = float ( l_lstData [  9 ] )
        l_dDst     = float ( l_lstData [ 10 ] )
        l_dQDM     = float ( l_lstData [ 11 ] )

        #** ---------------------------------------------------------------------------------------
        #*  proa
        #*/
        l_szProa = "%03d" % int ( round ( l_dProa % 360. ))

        #** ---------------------------------------------------------------------------------------
        #*  esta variando a proa ?
        #*/
        if ( l_dProaDem != l_dProa ):

            #** -----------------------------------------------------------------------------------
            #*  monta valor de demanda
            #*/
            l_szProaD = "%03d" % int ( round ( l_dProaDem % 360. ))

        #** ---------------------------------------------------------------------------------------
        #*  senao, a proa esta fixa
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  sem valor de demanda
            #*/
            l_szProaD = "   "

        #** ---------------------------------------------------------------------------------------
        #*  velocidade
        #*/
        l_szVel = "%03d" % int ( round ( l_dVel * glbDefs.xCNV_Ms2Knots ))

        #** ---------------------------------------------------------------------------------------
        #*  esta variando a velocidade ?
        #*/
        if ( l_dVelDem != l_dVel ):

            #** -----------------------------------------------------------------------------------
            #*  monta valor de demanda
            #*/
            l_szVelD = "%03d" % int ( round ( l_dVelDem * glbDefs.xCNV_Ms2Knots ))

        #** ---------------------------------------------------------------------------------------
        #*  senao, a velocidade esta fixa
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  sem valor de demanda
            #*/
            l_szVelD = "   "

        #** ---------------------------------------------------------------------------------------
        #*  nivel
        #*/
        l_szNiv = "%03d" % int ( round (( l_dAlt * glbDefs.xCNV_M2ft ) / 100. ))

        #** ---------------------------------------------------------------------------------------
        #*  esta variando a altitude ?
        #*/
        if ( l_dAltDem != l_dAlt ):

            #** -----------------------------------------------------------------------------------
            #*  monta valor de demanda
            #*/
            l_szNivD = "%03d" % int ( round (( l_dAltDem * glbDefs.xCNV_M2ft ) / 100. ))

        #** ---------------------------------------------------------------------------------------
        #*  senao, a altitude esta fixa
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  sem valor de demanda
            #*/
            l_szNivD = "   "

        #** ---------------------------------------------------------------------------------------
        #*  azimute
        #*/
        l_szAzm = "%03d" % int ( round ( l_dAzm % 360. ))

        #** ---------------------------------------------------------------------------------------
        #*  distancia
        #*/
        l_szDst = "%03d" % int ( l_dDst * glbDefs.xCNV_M2NM )

        #** ---------------------------------------------------------------------------------------
        #*  QDM
        #*/
        l_szQDM = "%03d" % int ( round ( l_dQDM % 360. ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*/
        return (( l_szStat,  l_szIdent, l_szTipo,
                  l_szProa,  l_szVel,   l_szNiv,
                  l_szProaD, l_szVelD,  l_szNivD,
                  l_szAzm,   l_szDst,   l_szQDM ))

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::makeIcon
    #*  -------------------------------------------------------------------------------------------
    #*  create a strip icon
    #*  -------------------------------------------------------------------------------------------
    #*  @param  DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeIcon ( self, f_tCor ):

        #/ nome do metodo (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::makeIcon"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  cria um icone de strip
        #*/
        l_srfIcn = pygame.Surface (( self._tWH [ 0 ], locDefs.xSCR_STP_Height - 2 ))
        assert ( l_srfIcn )

        #** ---------------------------------------------------------------------------------------
        #*  preeche com a cor de fundo
        #*/
        l_srfIcn.fill ( f_tCor )
        #l_srfIcn.set_colorkey ( l_srfIcn.get_at (( 1, 1 )))

        #** ---------------------------------------------------------------------------------------
        #*  retangulo que define uma strip
        #*/
        #l_retStrip = ( 0, 0 ), ( self._tWH [ 0 ], locDefs.xSCR_STP_Height - 2 )

        #** ---------------------------------------------------------------------------------------
        #*  desenha a moldura externa no icone de strip
        #*/
        #pygame.draw.rect ( l_srfIcn, f_tCor, l_retStrip, 1 )

        #** ---------------------------------------------------------------------------------------
        #*  desenha as linhas internas do icone de strip
        #*/
        pygame.draw.line ( l_srfIcn, glbDefs.xCOR_black, (  63, 1 ), (  63, 36 ))
        pygame.draw.line ( l_srfIcn, glbDefs.xCOR_black, ( 160, 1 ), ( 160, 36 ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna o icone
        #*/
        return ( l_srfIcn )

    #** ===========================================================================================
    #*  acesso a area de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "stripPiloto" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
