#!/usr/bin/env python
# -*- coding: utf-8 -*-
#** -----------------------------------------------------------------------------------------------
#*  pyACME
#*  Copyright (c) 2008, Milton Abrunhosa
#*  -----------------------------------------------------------------------------------------------
#*  Package..: pyACME
#*  Classe...: guiStrip
#*
#*  Descrição: this class takes care of all interaction with the user
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Alteração
#*  -----------------------------------------------------------------------------------------------
#*  mlabru   2008/fev/12  version started
#*  -----------------------------------------------------------------------------------------------
#*  Detalhes de Versão
#*  -----------------------------------------------------------------------------------------------
#*  start    2008/fev/12  version started
#*  1.2-0.1  2008/jun/20  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/

#** -----------------------------------------------------------------------------------------------
#*  includes
#*  -----------------------------------------------------------------------------------------------
#*/

#/ log4Py (logger)
#/ ------------------------------------------------------------------------------------------------
import logging

#/ pyGame (biblioteca gráfica)
#/ ------------------------------------------------------------------------------------------------
import pygame

from pygame.locals import *

#/ pyACME / model
#/ ------------------------------------------------------------------------------------------------
import model.glbDefs as glbDefs
import model.locDefs as locDefs

#/ pyACME / view
#/ ------------------------------------------------------------------------------------------------
import view.guiModel as guiModel

#** -----------------------------------------------------------------------------------------------
#*  variáveis globais
#*  -----------------------------------------------------------------------------------------------
#*/

#/ logging level
#/ ------------------------------------------------------------------------------------------------
#w_logLvl = logging.INFO
w_logLvl = logging.DEBUG

#** -----------------------------------------------------------------------------------------------
#*  guiStrip::guiStrip
#*  -----------------------------------------------------------------------------------------------
#*  DOCUMENT ME!
#*  -----------------------------------------------------------------------------------------------
#*/
class guiStrip ( guiModel.guiModel ):

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::__init__
    #*  -------------------------------------------------------------------------------------------
    #*  initializes the scope area
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_cm  - DOCUMENT ME!
    #*  @param  f_srf - DOCUMENT ME!
    #*  @param  f_tNW - DOCUMENT ME!
    #*  @param  f_tWH - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def __init__ ( self, f_cm, f_srf, f_tNW, f_tWH ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::__init__"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_cm )

        #assert ( f_srf )
        #assert ( f_tNW )
        #assert ( f_tWH )

        #** ---------------------------------------------------------------------------------------
        #*  initialize super classe
        #*/
        guiModel.guiModel.__init__ ( self, f_cm, f_srf, f_tNW, f_tWH, u"lista de vôos" )

        #** ---------------------------------------------------------------------------------------
        #*  cria a fonte
        #*/
        self._font = pygame.font.Font ( glbDefs.xFNT_MONO, 14 )
        #assert ( self._font )

        #** ---------------------------------------------------------------------------------------
        #*  there's room for N flights on the stripList
        #*/
        self._iStripMax = int ( round (( f_tWH [ 1 ] - locDefs.xSCR_HDR_Height ) / locDefs.xSCR_STP_Height ))
        #l_log.info ( "self._iStripMax: " + str ( self._iStripMax ))

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::doUpdate
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf       - DOCUMENT ME!
    #*  @param  f_iI        - DOCUMENT ME!
    #*  @param  f_oAtv      - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def doUpdate ( self, f_srf, f_iI, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::doUpdate"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  verifica se tem espaço para exibir a strip
        #*/
        if (( f_iI >= 0 ) and ( f_iI < self._iStripMax )):

            #** -----------------------------------------------------------------------------------
            #*  obtém a cor da strip pelo status
            #*/
            l_tCor = self.getStatusColor ( f_oAtv )
            #assert ( l_tCor )

            #** -----------------------------------------------------------------------------------
            #*  make strip icon
            #*/
            l_icnStrip = self.makeIcon ( l_tCor )
            #assert ( l_icnStrip )

            #** -----------------------------------------------------------------------------------
            #*  calculate the strip position
            #*/
            l_tPosStrip = ( 0, ( f_iI * locDefs.xSCR_STP_Height ))
            #assert ( l_tPosStrip )

            #** -----------------------------------------------------------------------------------
            #*  coloca a strip na posição selecionada
            #*/
            self._canvas.blit ( l_icnStrip, l_tPosStrip )

            #** -----------------------------------------------------------------------------------
            #*  coloca o texto sobre a strip
            #*/
            self.drawStripText ( self._canvas, l_tPosStrip, f_oAtv )

            #** -----------------------------------------------------------------------------------
            #*  salva a posição da strip na aeronave
            #*/
            f_oAtv.setStrip (( l_tPosStrip, ( self._tWH [ 0 ], locDefs.xSCR_STP_Height - 2 )))

            #** -----------------------------------------------------------------------------------
            #*  transfere o canvas para a superfície recebida
            #*/
            self.drawCanvas ( f_srf )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::drawStripText
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_srf       - DOCUMENT ME!
    #*  @param  f_tPosStrip - DOCUMENT ME!
    #*  @param  f_oAtv      - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def drawStripText ( self, f_srf, f_tPosStrip, f_oAtv ): pass

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::drawStripText"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_srf )
        #assert ( f_tPosStrip )
        #assert ( f_oAtv )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::getStatusColor
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_oAtv - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def getStatusColor ( self, f_oAtv ):

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::getStatusColor"

        #/ strip color
        #/ ----------------------------------------------------------------------------------------
        l_tCor = glbDefs.xCOR_green


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave no solo ?
        #*/
        if ( f_oAtv.getSolo ()):

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave no solo
            #*/
            l_szStat = "S" + f_oAtv.getStatusSolo ()

        #** ---------------------------------------------------------------------------------------
        #*  senão, aeronave em vôo
        #*/
        else:

            #** -----------------------------------------------------------------------------------
            #*  status de aeronave em vôo
            #*/
            l_szStat = "V" + f_oAtv.getStatusVoo ()

        #** ---------------------------------------------------------------------------------------
        #*  acidentada ?
        #*/
        if ( l_szStat in [ "SA", "SX" ] ):

            #** -----------------------------------------------------------------------------------
            #*  vermelha
            #*/
            l_tCor = locDefs.xCOR_SA
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  decolagem (autorizada/posição/DEP/ARR) ?
        #*/
        elif ( l_szStat in [ "SD" ] ):

            #** -----------------------------------------------------------------------------------
            #*  vermelha
            #*/
            l_tCor = locDefs.xCOR_SD
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  decolagem (autorizada/posição/DEP/ARR) ?
        #*/
        elif ( l_szStat in [ "SE", "SY" ] ):

            #** -----------------------------------------------------------------------------------
            #*  vermelha
            #*/
            l_tCor = locDefs.xCOR_SE
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  estacionadas ?
        #*/
        elif ( l_szStat in [ "SP", "SS" ] ):

            #** -----------------------------------------------------------------------------------
            #*  cinza
            #*/
            l_tCor = locDefs.xCOR_SP
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  em movimento (pushback/taxi)?
        #*/
        elif ( "ST" == l_szStat ):

            #** -----------------------------------------------------------------------------------
            #*  azul
            #*/
            l_tCor = locDefs.xCOR_ST
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave com ATZ de pouso ?
        #*/
        elif ( l_szStat in [ "VD", "VF", "VP" ] ):

            #** -----------------------------------------------------------------------------------
            #*  vermelha
            #*/
            l_tCor = locDefs.xCOR_VD
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave com o APP (proc/transf) ?
        #*/
        elif ( "VN" == l_szStat ):

            #** -----------------------------------------------------------------------------------
            #*  branca
            #*/
            l_tCor = locDefs.xCOR_VN
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave com a TWR ?
        #*/
        elif ( l_szStat in [ "VC", "VK", "VT", "VV" ] ):

            #** -----------------------------------------------------------------------------------
            #*  amarela
            #*/
            l_tCor = locDefs.xCOR_VC
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  aeronave selecionada ?
        #*/
        if ( f_oAtv.getSelected ()):

            #** -----------------------------------------------------------------------------------
            #*  vôo selecionado pelo usuário = verde
            #*/
            l_tCor = locDefs.xCOR_Selected
            #assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  existem alertas para esta aeronave ?
        #*/
        #elif ( f_oAtv.getAlerts () > 0 ):

            #** -----------------------------------------------------------------------------------
            #*  this flight has alerts - use red icons
            #*/
            #l_tCor = glbDefs.xCOR_red
            ##assert ( l_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

        #** ---------------------------------------------------------------------------------------
        #*  retorna a cor baseado no status da aeronave
        #*/
        return ( l_tCor )

    #** -------------------------------------------------------------------------------------------
    #*  guiStrip::makeIcon
    #*  -------------------------------------------------------------------------------------------
    #*  DOCUMENT ME!
    #*  -------------------------------------------------------------------------------------------
    #*  @param  f_tCor - DOCUMENT ME!
    #*
    #*  @return nenhum
    #*  -------------------------------------------------------------------------------------------
    #*/
    def makeIcon ( self, f_tCor ): pass

        #/ nome do método (logger)
        #/ ----------------------------------------------------------------------------------------
        #l_szMetodo = "guiStrip::makeIcon"


        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log = logging.getLogger ( l_szMetodo )
        #l_log.setLevel ( w_logLvl )
        #l_log.debug ( ">> " )

        #** ---------------------------------------------------------------------------------------
        #*  verifica parâmetros de entrada
        #*/
        #assert ( f_tCor )

        #** ---------------------------------------------------------------------------------------
        #*  m.poirot logger
        #*/
        #l_log.debug ( "<< " )

    #** ===========================================================================================
    #*  acesso a área de dados do objeto
    #*  ===========================================================================================
    #*/

#** -----------------------------------------------------------------------------------------------
#*/
logger = logging.getLogger ( "guiStrip" )

#** -----------------------------------------------------------------------------------------------
#*/
logger.setLevel ( w_logLvl )

#** ----------------------------------------------------------------------------------------------- *#
